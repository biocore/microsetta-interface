# Note that in reality essentially all of these functions would require oath security, but it makes them hard to test
# through the swagger web ui (as you have to send the authorization header, I don't yet know how to do from there...?)
# so only /account get has oath implemented.
openapi: 3.0.0
info:
  description: Minimal Client Example
  version: "0.3.0-oas3"
  title: Minimal Client Example (OAS 3.0)
servers:
  - url: '/'
paths:
  '/':
    get:
      operationId: microsetta_interface.implementation.get_rootpath
      tags:
        - General
      responses:
        '302':
          description: Redirect to home page

  '/home':
    get:
      operationId: microsetta_interface.implementation.get_home
      tags:
        - General
      responses:
        '200':
          description: Home Page
          content:
            text/html:
              schema:
                type: string

  '/error':
    get:
      operationId: microsetta_interface.implementation.get_show_error_page
      description: Neatly display error messages sent from the front-end (only)
      tags:
        - General
      parameters:
        - $ref: '#/components/parameters/error_msg'
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string

  '/authrocket_callback':
    get:
      operationId: microsetta_interface.implementation.get_authrocket_callback
      tags:
        - Authentication
      parameters:
        - in: query
          name: token
          schema:
            type: string
        - in: query
          name: redirect_uri
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Returning home

  '/logout':
    get:
      operationId: microsetta_interface.implementation.get_logout
      tags:
        - Authentication
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Returning home

  '/signup_form':
    get:
      operationId: microsetta_interface.implementation.get_submit_interest
      parameters:
        - in: query
          name: campaign_id
          schema:
            type: string
        - in: query
          name: source
          schema:
            type: string
      responses:
        '200':
          description: Form to express interest in signing up
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_submit_interest
      tags:
        - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Page confirming form submission
          content:
            text/html:
              schema:
                type: string

  '/opt_out':
    get:
      operationId: microsetta_interface.implementation.get_opt_out
      parameters:
        - in: query
          name: uid
          schema:
            type: string
      responses:
        '200':
          description: Page allowing user to opt out
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_opt_out
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Page confirming user has opted out
          content:
            text/html:
              schema:
                type: string

  '/update_address':
    get:
      operationId: microsetta_interface.implementation.get_update_address
      parameters:
        - in: query
          name: uid
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
      responses:
        '200':
          description: Form to update address
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_update_address
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Page confirming form submission
          content:
            text/html:
              schema:
                type: string

  '/create_account':
    get:
      operationId: microsetta_interface.implementation.get_create_account
      tags:
        - Account
      responses:
        '200':
          description: Form to create an account
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_create_account
      tags:
        - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action

  '/accounts/{account_id}':
    get:
      operationId: microsetta_interface.implementation.get_account
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '200':
          description: Display of account
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/update_email':
    get:
      operationId: microsetta_interface.implementation.get_update_email
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '200':
          description: Page asking user if they want to update their email
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action
    post:
      operationId: microsetta_interface.implementation.post_update_email
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action

  '/accounts/{account_id}/details':
    get:
      operationId: microsetta_interface.implementation.get_account_details
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '200':
          description: Editable display of account details
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_account_details
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action

  '/accounts/{account_id}/create_human_source':
    get:
      operationId: microsetta_interface.implementation.get_consent_page
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '200':
          description: Form to create a human source
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_create_human_source
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action

  '/accounts/{account_id}/create_nonhuman_source/':
    get:
      operationId: microsetta_interface.implementation.get_create_nonhuman_source
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '200':
          description: Form to create a non-human source
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_create_nonhuman_source
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: List of sources page
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/check_duplicate_source':
    post:
      operationId: microsetta_interface.implementation.check_duplicate_source
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: List of sources page
          content:
            application/json:
              schema:
                type: object

  '/accounts/{account_id}/sources/{source_id}':
    get:
      operationId: microsetta_interface.implementation.get_source
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Display of source
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/kits':
    get:
      operationId: microsetta_interface.implementation.get_kits
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/check_survey_date'
      responses:
        '200':
          description: Display of kits for a source
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/nutrition':
    get:
      operationId: microsetta_interface.implementation.get_nutrition
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Display of FFQs for a source
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/reports':
    get:
      operationId: microsetta_interface.implementation.get_reports
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Display of Reports for a source
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/external_reports/{external_report_id}':
    get:
      operationId: microsetta_interface.implementation.get_external_report
      tags:
        - Survey
      summary: Retrieve an external report and render the file for the user
      description:  Retrieve an external report and render the file for the user
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/external_report_id'
      responses:
        '200':
          description: External report file
        '404':
          description: No such report

  '/accounts/{account_id}/sources/{source_id}/decline_reconsent':
    get:
      operationId: microsetta_interface.implementation.decline_reconsent
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '302':
          description: Set session variable for declined reconsent and redirect to profile page

  '/accounts/{account_id}/sources/{source_id}/reconsent/{consent_type}':
    get:
      operationId: microsetta_interface.implementation.get_reconsent
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/consent_type'
      responses:
        '200':
          description: Interface to agree to the current consent document
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirect if the user doesn't need to reconsent


  '/accounts/{account_id}/sources/{source_id}/consents':
    get:
      operationId: microsetta_interface.implementation.get_consents
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Display of consent docs for a source
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/consents/{consent_type}/view':
    get:
      operationId: microsetta_interface.implementation.get_consent_view
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/consent_type'
      responses:
        '200':
          description: Display a signed consent document
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/update_age_range':
    get:
      operationId: microsetta_interface.implementation.get_update_age
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Display the age update and consent interface
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirect if the user is 18+

  # Note: ideally this would be represented as a DELETE, not as a GET
  # However, it is used as a link, which does not support an HTTP action of
  # delete
  '/accounts/{account_id}/sources/{source_id}/remove':
    get:
      operationId: microsetta_interface.implementation.get_remove_source
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Display of revised info or error info
          content:
            text/html:
              schema:
                type: string

  # same as above
  '/accounts/{account_id}/request/remove':
    post:
      operationId: microsetta_interface.implementation.post_request_account_removal
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user_delete_reason:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Remove account request submitted
          content:
            text/html:
              schema:
                type: string


  '/accounts/{account_id}/sources/{source_id}/claim_samples':
    post:
      operationId: microsetta_interface.implementation.post_claim_samples
      tags:
        - Samples
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                sample_id:
                  type: array
                  items:
                    type: string
            encoding:
              sample_id:
                style: form
                explode: true
      responses:
        '302':
          description: Return to view source page
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}':
    get:
      operationId: microsetta_interface.implementation.get_update_sample
      tags:
        - Sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Display of sample info
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_update_sample
      tags:
        - Sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Display of sample info
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/after_edit_questionnaire':
    get:
      operationId: microsetta_interface.implementation.check_questionnaire
      tags:
        - Sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Ask if user wants to take FFQ
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/results':
    get:
      operationId: microsetta_interface.implementation.get_sample_results
      tags:
        - Sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Display of sample results
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/results-experimental':
    get:
      operationId: microsetta_interface.implementation.get_sample_results_experimental_authenticated
      tags:
        - Sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Display of sample results
          content:
            text/html:
              schema:
                type: string

  '/example-endpoint':
    get:
      operationId: microsetta_interface.implementation.example_endpoint
      tags:
        - Sample
      responses:
        '200':
          description: Display of stuff
          content:
            text/html:
              schema:
                type: string

  '/results-example':
    get:
      operationId: microsetta_interface.implementation.get_sample_results_experimental
      tags:
        - Sample
      responses:
        '200':
          description: Display of sample results
          content:
            text/html:
              schema:
                type: string

  # Note: ideally this would be represented as a DELETE, not as a GET
  # However, it is used as a redirect from a link, which does not support DELETE actions
  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/remove':
    get:
      operationId: microsetta_interface.implementation.get_remove_sample_from_source
      tags:
        - Sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Display of revised source info or error info
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/myfoodrepo_no_slots':
    get:
      operationId: microsetta_interface.implementation.get_myfoodrepo_no_slots
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: No available slots for participants
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/take_survey':
    get:
      operationId: microsetta_interface.implementation.get_fill_source_survey
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_template_id'
      responses:
        '200':
          description: Primary Survey
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_ajax_fill_local_source_survey
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_template_id'
        - $ref: '#/components/parameters/target'

      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action
  
  '/accounts/{account_id}/sources/{source_id}/create_skin_scoring_app_credentials':
    post:
      operationId: microsetta_interface.implementation.post_ajax_skin_scoring_app_credentials
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Credentials for skin scoring app
          content:
            application/json:
              schema:
                type: object

  '/accounts/{account_id}/sources/{source_id}/vioscreen_ffq':
    get:
      operationId: microsetta_interface.implementation.get_fill_vioscreen_remote_sample_survey
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - in: query
          name: sample_id
          schema:
            type: string
            nullable: true
        - in: query
          name: registration_code
          schema:
            type: string
            nullable: true
        - in: query
          name: vio_id
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Take the vioscreen remote survey
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/vspassthru':
    get:
      operationId: microsetta_interface.implementation.get_to_save_vioscreen_remote_sample_survey
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - in: query
          name: key
          schema:
            type: string
      responses:
        '200':
          description: Error report
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action

  '/accounts/{account_id}/sources/{source_id}/surveys/{survey_id}/reports/topfoodreport':
    # Disambiguation page for view/download pdf
    get:
      operationId: microsetta_interface.implementation.top_food_report
      tags:
        - Survey
      summary: Generate vioscreen top food report
      description:  Generate vioscreen top food report
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_id'

      responses:
        '200':
          description: Top Food Report pdf
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirecting to necessary action
        '404':
          description: No such pdf


  '/accounts/{account_id}/sources/{source_id}/surveys/{survey_id}/reports/topfoodreport/pdf':
    # Attempts to generate the vioscreen top food report pdf from this vioscreen survey
    get:
      operationId: microsetta_interface.implementation.top_food_report_pdf
      tags:
        - Survey
      summary: Generate vioscreen top food report
      description:  Generate vioscreen top food report
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_id'
      responses:
        '200':
          description: Top Food Report pdf
        '404':
          description: No such pdf

  '/check_ffq_code_valid':
    get:
      operationId: microsetta_interface.implementation.get_ajax_check_ffq_code
      tags:
        - Survey
      parameters:
        - $ref: '#/components/parameters/ffq_code'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Result of check
          content:
            text/html:
              schema:
                type: string

  '/accounts/{account_id}/sources/{source_id}/register_ffq':
    post:
      operationId: microsetta_interface.implementation.post_generate_vioscreen_url
      tags:
        - Source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                ffq_code:
                  type: string
      responses:
        '200':
          description: Display of FFQs for a source
          content:
            text/html:
              schema:
                type: string

  '/check_kit_valid':
    get:
      operationId: microsetta_interface.implementation.get_ajax_check_kit_valid
      tags:
        - Kit
      parameters:
        - $ref: '#/components/parameters/kit_name'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Result of check
          content:
            text/html:
              schema:
                type: string

  '/list_kit_samples':
    get:
      operationId: microsetta_interface.implementation.get_ajax_list_kit_samples
      tags:
        - Kit
      parameters:
        - $ref: '#/components/parameters/kit_name'
      responses:
        '200':
          description: Result of check
          content:
            application/json:
              schema:
                type: array

  '/check_activation_code':
    get:
      operationId: microsetta_interface.implementation.get_ajax_check_activation_code
      tags:
        - Activation
      parameters:
        - $ref: '#/components/parameters/activation_code'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Result of check
          content:
            text/html:
              schema:
                type: string

  '/user_address_verification':
    get:
      operationId: microsetta_interface.implementation.get_ajax_address_verification
      parameters:
        - in: query
          name: address_1
          description: First line of address to verify
          schema:
            type: string
        - in: query
          name: address_2
          description: Second line of address to verify
          schema:
            type: string
        - in: query
          name: address_3
          description: Third line of address to verify
          schema:
            type: string
        - in: query
          name: city
          description: City of address to verify
          schema:
            type: string
        - in: query
          name: state
          description: State of address to verify
          schema:
            type: string
        - in: query
          name: postal
          description: Postal code of address to verify
          schema:
            type: string
        - in: query
          name: country
          description: Country of address to verify
          schema:
            type: string
      responses:
        '200':
          description: True/false response of whether address is valid
          content:
            text/html:
              schema:
                type: string

  '/admin/account_delete':
    post:
      operationId: microsetta_interface.implementation.post_account_delete
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                account_id:
                  type: string
                  nullable: false
                delete_reason:
                  type: string
                  nullable: true
      
      responses:
        '200':
          description: Account successfully deleted, redirect to home
          content:
            text/html:
              schema:
                type: string

  '/admin/account_ignore_delete':
    post:
      operationId: microsetta_interface.implementation.post_account_ignore_delete
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                account_id:
                  type: string
                  nullable: false
      responses:
        '200':
          description: Account successfully removed from delete queue, redirect to home
          content:
            text/html:
              schema:
                type: string
                
  '/admin/perk_fulfillment_state':
    get:
      operationId: microsetta_interface.implementation.get_perk_fulfillment_state
      tags:
        - Admin
      responses:
        '200':
          description: Current state of whether perk fulfillment tasks are running
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.update_perk_fulfillment_state
      tags:
        - Admin
      parameters:
        - in: query
          name: perk_fulfillment_state
          description: New state of perk fulfillment tasks
          schema:
            type: boolean
      responses:
        '200':
          description: Updated state of whether perk fulfillment tasks are running
          content:
            text/html:
              schema:
                type: string

  '/admin/interested_users':
    get:
      operationId: microsetta_interface.implementation.get_interested_users
      tags:
        - Admin
      parameters:
        - in: query
          name: email
          description: Email to search for
          schema:
            type: string
      responses:
        '200':
          description: List of interested users
          content:
            text/html:
              schema:
                type: string

  '/admin/interested_user_edit':
    get:
      operationId: microsetta_interface.implementation.get_interested_user_edit
      tags:
        - Admin
      parameters:
        - in: query
          name: iuid
          description: Interested user ID
          schema:
            type: string
      responses:
        '200':
          description: Interested user
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_interested_user_edit
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Updated interested user
          content:
            text/html:
              schema:
                type: string

  '/admin/account_search':
    get:
      operationId: microsetta_interface.implementation.get_interactive_account_search
      tags:
        - Admin
      parameters:
        - in: query
          name: email_query
          description: Email to search for
          schema:
            type: string
      responses:
        '200':
          description: List of identified accounts
          content:
            text/html:
              schema:
                type: string

  '/admin/ffq_codes':
    get:
      operationId: microsetta_interface.implementation.get_generate_ffq_codes
      tags:
        - Admin
      responses:
        '200':
          description: Activation code info for query
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_generate_ffq_codes
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Search results showing new email
          content:
            text/html:
              schema:
                type: string

  '/admin/ffq_codes/search':
    get:
      operationId: microsetta_interface.implementation.get_search_ffq_codes
      tags:
        - Admin
      parameters:
        - in: query
          name: email_query
          description: Email to search for
          schema:
            type: string
      responses:
        '200':
          description: List of FFQ codes and related information
          content:
            text/html:
              schema:
                type: string

  '/admin/address_verification':
    get:
      operationId: microsetta_interface.implementation.get_address_verification
      tags:
        - Admin
      parameters:
        - in: query
          name: address_1
          description: First line of address to verify
          schema:
            type: string
        - in: query
          name: address_2
          description: Second line of address to verify
          schema:
            type: string
        - in: query
          name: address_3
          description: Third line of address to verify
          schema:
            type: string
        - in: query
          name: city
          description: City of address to verify
          schema:
            type: string
        - in: query
          name: state
          description: State of address to verify
          schema:
            type: string
        - in: query
          name: postal
          description: Postal code of address to verify
          schema:
            type: string
        - in: query
          name: country
          description: Country of address to verify
          schema:
            type: string
      responses:
        '200':
          description: Address verification info
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_address_verification
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Search results showing new email
          content:
            text/html:
              schema:
                type: string

  '/admin/campaigns/list':
    get:
      operationId: microsetta_interface.implementation.get_campaigns
      tags:
        - Admin
      responses:
        '200':
          description: List of campaigns for admin users to view/edit
          content:
            text/html:
              schema:
                type: string

  '/admin/campaigns/edit':
    get:
      operationId: microsetta_interface.implementation.get_campaign_edit
      tags:
        - Admin
      parameters:
        - in: query
          name: campaign_id
          description: ID of campaign to edit
          schema:
            type: string
      responses:
        '200':
          description: Form to add or edit an existing campaign
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_campaign_edit
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Output confirming the edit/creation of a campaign
          content:
            text/html:
              schema:
                type: string

  '/admin/system_message':
    get:
      operationId: microsetta_interface.implementation.get_system_message
      tags:
        - Admin
      responses:
        '200':
          description: System Message Builder Webpage
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: microsetta_interface.implementation.post_system_message
      tags:
        - Admin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                system_msg:
                  type: string
                  nullable: true
                msg_style:
                  type: string
                  enum: [null, "primary", "secondary", "success", "danger", "warning", "info", "light", "dark"]
      responses:
        '200':
          description: System Message Builder Webpage
          content:
            text/html:
              schema:
                type: string

  '/admin/emperor_playground':
    get:
      operationId: microsetta_interface.implementation.admin_emperor_playground
      tags:
        - Admin
      responses:
        '200':
          description: Emperor test page
          content:
            text/html:
              schema:
                type: string

  '/admin/barcode_search':
    get:
      operationId: microsetta_interface.implementation.admin_barcode_search
      tags:
        - Admin
      responses:
        '200':
          description: Barcode Search
          content:
            text/html:
              schema:
                type: string

  '/admin/barcode_search/query':
    post:
      operationId: microsetta_interface.implementation.admin_barcode_search_query
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Barcode Search
          content:
            text/html:
              schema:
                type: string

  '/admin/barcode_search/query_qiita':
    post:
      operationId: microsetta_interface.implementation.admin_barcode_search_query_qiita
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Barcode Search
          content:
            text/html:
              schema:
                type: string

  '/admin/account_removal/list':
    get:
      operationId: microsetta_interface.implementation.get_account_removal_requests
      tags:
        - Admin
      responses:
        '200':
          description: List of account removal requests for admin users to view/edit
          content:
            text/html:
              schema:
                type: string


components:
  parameters:
    account_id: # Can be referenced as '#/components/parameters/account_id'
      name: account_id
      in: path
      description: Unique id specifying a user account
      schema:
        $ref: '#/components/schemas/account_id'
      required: true
    activation_code:
      name: code
      in: query
      description: Activation code
      schema:
        $ref: '#/components/schemas/activation_code'
      required: true
    email:
      name: email
      in: query
      description: User's email
      schema:
        $ref: '#/components/schemas/email'
      required: true
    kit_id:
      name: kit_id
      in: path
      description: Unique internal id specifying a kit
      schema:
        type: string
        example: "c442f31d-fa17-4fd1-85e2-1f251d13ec26"
      required: true
    kit_name:
      name: kit_name
      in: query
      description: User-facing id of kit
      schema:
        $ref: '#/components/schemas/kit_name'
      required: true
    sample_id:
      name: sample_id
      in: path
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/sample_id'
      required: true
    consent_id:
      name: consent_id
      in: path
      description: Unique id of a signed consent document
      schema:
        $ref: '#/components/schemas/consent_id'
      required: true
    consent_type:
      name: consent_type
      in: path
      description: Type of consent document
      schema:
        $ref: '#/components/schemas/consent_type'
      required: true
    session_opt_out:
      name: session_opt_out
      in: query
      description: Indication the user has opted out within a session
      schema:
        $ref: '#/components/schemas/session_opt_out'
      required: true
    survey_id:
      name: survey_id
      in: path
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/survey_id'
      required: true
    survey_template_id:
      name: survey_template_id
      in: query
      description: Unique internal id specifying a particular survey template
      schema:
        $ref: '#/components/schemas/survey_template_id'
      required: true
    target:
      name: target
      in: query
      description: Where to route user after completing a survey
      schema:
        $ref: '#/components/schemas/target'
    available_survey_template_ids:
      name: available_survey_template_ids
      in: query
      description: List of internal IDs for unanswered surveys
      schema:
        $ref: '#/components/schemas/available_survey_template_ids'
      required: true
    unavailable_survey_template_ids:
      name: unavailable_survey_template_ids
      in: query
      description: List of internal IDs for unavailable (possibly answered) surveys
      schema:
        $ref: '#/components/schemas/unavailable_survey_template_ids'
      required: true
    survey_template_id_in_path:
      name: survey_template_id
      in: path
      description: Unique internal id specifying a particular survey template
      schema:
        $ref: '#/components/schemas/survey_template_id'
      required: true
    source_id:
      name: source_id
      in: path
      description: Unique id specifying a source
      schema:
        $ref: '#/components/schemas/source_id'
      required: true
    error_msg:
      name: error_msg
      in: query
      description: Error message provided by front-end
      schema:
        $ref: '#/components/schemas/error_msg'
    registration_code:
      name: registration_code
      in: query
      description: Registration code attached to a Vioscreen registry entry
      schema:
        $ref: '#/components/schemas/registration_code'
    ffq_code:
      name: ffq_code
      in: query
      description: FFQ code
      schema:
        $ref: '#/components/schemas/ffq_code'
    check_survey_date:
      name: check_survey_date
      in: query
      description: T/F flag on whether the Kits page should check user's most recent survey update date
      schema:
        $ref: '#/components/schemas/check_survey_date'
    external_report_id:
      name: external_report_id
      in: path
      description: Unique identifier for an external report
      schema:
        $ref: '#/components/schemas/external_report_id'
      required: true

  schemas:
    # account section
    account_id:
      type: string
      readOnly: true
      example: "aaaaaaaa-bbbb-cccc-dddd-eeeeffffffff"
    email:
      type: string
      format: email
      example: "janedoe@example.com"
    source_id:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0"
    sample_id:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "dae21127-27bb-4f52-9fd3-a2aa5eb5b86f"
    consent_id:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0"
    survey_id:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "1234567890abcdef"
    survey_template_id:
      type: integer
      example: 3
    available_survey_template_ids:
      type: string
      example: "2,3,4"
    unavailable_survey_template_ids:
      type: string
      example: "2,3,4"
    session_opt_out:
      type: boolean
      example: false
    error_msg:
      type: string
      example: "%7B%0A%20%20%22detail%22%3A%20%22The%20browser%20(or%20proxy)%20sent%20a%20request%20that%20this%20server%20could%20not%20understand.%22%2C%0A%20%20%22status%22%3A%20400%2C%0A%20%20%22title%22%3A%20%22Bad%20Request%22%2C%0A%20%20%22type%22%3A%20%22about%3Ablank%22%0A%7D%0A"
    kit_name:
      type: string
      example: "aaaaa"
    activation_code:
      type: string
      example: "TMI-XXXXX-XXXXX-XXXXX"
    target:
      type: string
      example: "home"
    registration_code:
      type: string
      example: "TMI-XXXXX-XXXXX-XXXXX"
    ffq_code:
      type: string
      example: "TMI-XXXXX-XXXXX-XXXXX"
    consent_type:
      type: string
      example: "biospecimen"
    check_survey_date:
      type: boolean
      example: True
    external_report_id:
      type: string
      example: "b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0"

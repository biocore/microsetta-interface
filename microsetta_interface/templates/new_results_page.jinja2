{% extends "sitebase.jinja2" %}
{% set page_title = "Sample Results" %}
{% set show_breadcrumbs = show_breadcrumbs %}

{% block head %}

<link rel="stylesheet" type="text/css" href="/static/vendor/css/jquery.dataTables.css" />
<link id="emperor-css" rel="stylesheet" type="text/css" href="/static/vendor/emperor/css/emperor.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/jquery-ui.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/slick.grid.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/spectrum.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/chosen.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/jquery.contextMenu.min.css">
<link rel="stylesheet" type="text/css" href="/static/css/4_column_flex.css" />
<style>
    .nav-white-bg {
      background-color: #fff;
      width: auto;
    }
    .diversity-icon {
      vertical-align: middle;
      width: 72px;
      height: 72px;
      object-fit: contain;
      float:left;
     }
    .diversity-text {
        vertical-align:middle; 
        display:inline;
        float:left;
        padding: 10px;
        padding-left: 20px;
    }
    .diversity-header {
        background-color: #EDECEF;
        padding: 10px;
    }
    .diversity-compare {
      background-color: #ffffff;
      color: #747678;
      border-radius: 15px;
      padding: 10px;
      padding-left: 20px;
      border-style: solid;
      border-width: 2px;
      border-color: #006a96;
      width: 30%;
      margin: 20px;
    }
    .diversity-category {
      color: #006a96;
    }
    .diversity-info {

    }
    .diversity-banner {
      width: 100%;
      max-width: 1920px;
      height: auto;
      border-radius: 8px;
      border: 1px solid #ddd;
    }
    .similarity-fontstyle-same {
        color: var(--ucsd-green);
    }
    .similarity-fontstyle-different {
        color: var(--ucsd-brown);
    }
    /*.micromap {
        min-width: 400px;
        min-height: 300px;
    }*/
    .microinfo {
        min-width: 40%;
    }
    /*Removes the .active, .accordion:hover effect from minimal_interface.css*/
    /* Could potentially use color: initial but has less support...? */
    .accordion-microbiome-map
    {
        background-color: #eee;
        color: #000;
        cursor: pointer;
        padding: 5px;
        width: 100%;
        text-align: left;
        border: none;
        outline: none;
        transition: 0.4s;
        margin-bottom: 1%;
        margin-top: 1%;
    }
    .accordion-panel-microbiome-map {
        background-color: white;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
    }
    .tab-pane {
        background-color: #FFFFFF;
        color: #000000;
    } 
    .microbe-count {
        font-weight: bold;
    }
    div.results_text {
        text-align: left;
    }
    div.how_you_compare_section {
        background-color: #f1f1f1;
        color: #747678;
        border-radius: 15px;
        padding: 10px;
        padding-left: 20px;
        border-style: solid;
        border-width: thin;
        border-color: #006a96;
        width: 70%;
    }
    div.how_you_compare_section h3 {
      color: #006a96;
      font-weight: lighter;
      font-family: Mulish,sans-serif;
      font-size: 36px;
    }
    div.how_you_compare_section h4 {
      color: #006a96;
      font-weight: lighter;
      font-family: Mulish,sans-serif;
      font-size: 20px;
    }
    div.how_you_compare_section p {
      font: normal normal 400 14px/1.6 Muli,sans-serif;
      font-variant-numeric: oldstyle-nums;
      color: #747678;
    }
    div.how_you_compare_section a {
      color: #006a96;
    }
    div.your_sample_diversity_inset {
      background-color: #006a96;
      color: #ffffff;
      font-size: 20px;
      border-radius: 15px;
      border-style: solid;
      border-width: thin;
      border-color: #006a96;
      width: 35%;
      box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);
    }

    .scatter-bg {
      background: url('/static/img/scatter.png');
      background-position: top 400px left 0px;
      background-size: 220px;
      background-origin: content-box;
      background-repeat: no-repeat;
    }

    div.your_sample_diversity_inset .card-header {
      color: #ffffff;
      text-align: center;
    }

    div.your_sample_diversity_inset .card-body {
      color: #ffffff;
      font-size: 32px;
      text-align: center;
    }

    .tooltipper {
        color: #fc8900;
    }
    .tooltip.show {
        opacity: 1;
    }
     
    .tooltip-inner {
      background-color: #ffffff; !important;
      color: #747678;
      border: 2px solid #fc8900;
      }
     
    .bs-tooltip-auto[x-placement^=bottom] .arrow::before, .bs-tooltip-bottom .arrow::before {
        border-bottom-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=top] .arrow::before, .bs-tooltip-top .arrow::before {
        border-top-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=left] .arrow::before, .bs-tooltip-left .arrow::before {
        border-left-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=right] .arrow::before, .bs-tooltip-right .arrow::before {
        border-right-color: #fc8900 !important;
    }

</style>

<script type="text/javascript" language="javascript" src="/static/js/ruleset.js"></script>
<!-- Datatables must precede emperor imports, they don't play nice with each other. -->
<script type="text/javascript" charset="utf8" src="/static/vendor/js/jquery.dataTables.js"></script>
<script src="/static/vendor/DataTables/Buttons-1.6.2/js/dataTables.buttons.min.js"></script>
<script src="/static/vendor/DataTables/Buttons-1.6.2/js/buttons.html5.min.js"></script>
<script src="/static/vendor/DataTables/PercentageBars-1.10.21/js/percentageBars.js"></script>
    <!-- plotly must precede emperor imports as well.   I'm getting the feeling
     that emperor doesn't know how to play nice. -->
<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>

<script src="/static/vendor/emperor/vendor/js/require-2.1.22.min.js"></script>
<script src="/static/vendor/emperor/emperor_loader.js"></script>

<script>
    "use strict";

    function buildPlotlyEmperor(state, url, divSelector, plotTitle) {
        let renderPlot = function(data){
            // Data is an object with three fields,
            //    * decomposition - Two fields:
            //        *coordinates - Array of arrays:
            //            coordinates[0][2] is the first sample's value along
            //                the third principal component.
            //        *percents_explained - Array:
            //            percents_explained[1] is the second principal components % explained.
            //    * metadata - Docs claim array of array of arrays, but unclear
            //                 what would be kept in metadata[0]
            //      metadata[0][1][2] is the value of the second sample for
            //      the third metadata column.
            //    * metadata_headers - Array of names of metadata columns
            //        metadata_headers[0] = name of first metadata column

            let cat_index = 0;
            let category_name = data.metadata_headers[cat_index];
            let category_values = {};
            for (var i = 0; i < data.metadata.length; i++){
                var sample = data.metadata[i];
                var val = data.metadata[i][cat_index];
                if (val === 'NA')
                    continue;
                category_values[val] = 1;
            }

            let traces = [];
            let user_sample_id = state.barcode_prefix + state.sample_id;
            
            let markersize = 5;
            if (data.decomposition.coordinates.length > 10000) {
                markersize = 2;
            } else if (data.decomposition.coordinates.length > 2000) {
                markersize = 3;
            }

            for (let key in category_values)
            {
                // have to de-interleave the data.
                let xs = [];
                let ys = [];
                for (let i = 0; i < data.decomposition.coordinates.length; i++){
                    if (data.decomposition.sample_ids[i] == user_sample_id)
                        continue;
                    if (data.metadata[i][cat_index] == key){
                        xs.push(data.decomposition.coordinates[i][0]);
                        ys.push(data.decomposition.coordinates[i][1]);
                    }
                }

                let trace =
                {
                    name: key,
                    x: xs,
                    y: ys,
                    mode: 'markers',
                    type: 'scatter',
                    marker: { size: markersize }
                };
                traces.push(trace);
            }
            
            for (let i = 0; i < data.decomposition.coordinates.length; i++){
                if (data.decomposition.sample_ids[i] === user_sample_id){
                    let trace = {
                        name: "Your sample",
                        x: [data.decomposition.coordinates[i][0]],
                        y: [data.decomposition.coordinates[i][1]],
                        mode: "markers",
                        type: "scatter",
                        marker: {
                            size: 18
                        }
                    };
                    traces.push(trace);
                    break;
                }
            }

            let layout = {
                xaxis: {
                    showticklabels: false,
                    zeroline: false,
                    showgrid: false,
                    fixedrange: true,
                    showline: true

                },
                yaxis: {
                    showticklabels: false,
                    showgrid: false,
                    zeroline: false,
                    fixedrange: true,
                    showline: true
                },
                "hovermode": false,
                height: 450,
                width: 600,
                margin: {
                    l: 0,
                    r: 0,
                    b: 0,
                    t:0,
                    pad:0
                },
                legend: {
                    'itemsizing': 'constant'
                }
            };

            Plotly.newPlot(divSelector, traces, layout, {displayModeBar: false});
            //Plotly.Plots.resize(divSelector);
            //let options = {title: 'hate',
            //               legend: 'none',
            //               height: 300,
            //               width: 300,
            //               lineWidth: 0,
            //               chartArea: {'width': '100%',
            //                           'height': '90%',
            //                           left: 0,
            //                           legend: 'right',
            //                           top: 0},
            //               enableInteractivity: false,
            //               hAxis: { textPosition: 'none',
            //                        gridlines: { count: 1, color: 'black' } },
            //               vAxis: { textPosition: 'none',
            //                       gridlines: { count: 1, color: 'black' } },
                           //gridlines: { color: 'none' },
            //               trendlines: {  0: { opacity: 0 }}
            //              };
            //let chart = new google.visualization.ScatterChart(document.getElementById(divSelector));
            //chart.draw(gtable, options);
        }

        $.ajax({
            url: url,
            type: "GET",
            success: renderPlot
        });
    }

    function placeURLSourcedImage(state, url, divSelector) {
        $(divSelector).attr('src', url);
    };

    function getMicrobiomeMapsRasterizedPlots(state) {
        //Plot 1, plot sample type from tmi-datatype-allsamples
        let url = state.public_endpoint + '/dataset/' +
              'tmi-' + state.dataset_type.value + '-allsamples' +
              '/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/png?category=microbial_map&sample_id=' + state.barcode_prefix + state.sample_id;
        placeURLSourcedImage(state, url, "#pcoa-tmi-all-samples-img");
        
        //Plot 2, plot country from multipop-datatype-sampletype
        url = state.public_endpoint + '/dataset/' +
              'multipop-' + state.dataset_type.value + '-' + state.dataset_site.value +'/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/png?category=microbial_map_region&sample_id=' + state.barcode_prefix + state.sample_id;
        placeURLSourcedImage(state, url, "#pcoa-multipopulation-region-img");

        //Plot 3, plot country from multipop-datatype-sampletype
        url = state.public_endpoint + '/dataset/' +
              'lifestage-' + state.dataset_type.value + '-' + state.dataset_site.value +'/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/png?category=microbial_map_lifestage&sample_id=' + state.barcode_prefix + state.sample_id;
        placeURLSourcedImage(state, url, "#pcoa-multipopulation-lifestage-img");

        //Plot 4, plot sample type from empbuiltenv-datatype-sampletype
        url = state.public_endpoint + '/dataset/' +
              'builtenv-' + state.dataset_type.value + '-allsamples/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/png?category=microbial_map&sample_id=' + state.barcode_prefix + state.sample_id;
        placeURLSourcedImage(state, url, "#pcoa-builtenv-img");
    };

    function buildMicrobialMapsPlots(state)
    {
        //Plot 1, plot sample type from tmi-datatype-allsamples
        let url = state.public_endpoint + '/dataset/' +
              'tmi-' + state.dataset_type.value + '-allsamples' +
              '/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/emperor?metadata_categories=microbial_map'
        buildPlotlyEmperor(state,
                           url,
                           "pcoa-tmi-all-samples", //contents inserted into div name
                           "All of the Microsetta Initiative")

        //Plot 2, plot country from multipop-datatype-sampletype
        url = state.public_endpoint + '/dataset/' +
              'multipop-' + state.dataset_type.value + '-' + state.dataset_site.value +'/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/emperor?metadata_categories=microbial_map_region'
        buildPlotlyEmperor(state,
                           url,
                           "pcoa-multipopulation-region", //contents inserted into div name
                           "Multipopulation")


        //Plot 3, plot country from multipop-datatype-sampletype
        url = state.public_endpoint + '/dataset/' +
              'multipop-' + state.dataset_type.value + '-' + state.dataset_site.value +'/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/emperor?metadata_categories=microbial_map_lifestage'
        buildPlotlyEmperor(state,
                           url,
                           "pcoa-multipopulation-lifestage", //contents inserted into div name
                           "Multipopulation")


        //Plot 4, plot sample type from empbuiltenv-datatype-sampletype
        url = state.public_endpoint + '/dataset/' +
              'builtenv-' + state.dataset_type.value + '-allsamples/plotting/diversity/beta/' +
              state.beta_metric + '/pcoa/full-dataset' +
              '/emperor?metadata_categories=microbial_map'
        buildPlotlyEmperor(state,
                           url,
                           "pcoa-builtenv", //contents inserted into div name
                           "You and the Microbes Around You")
    }

    function addDatasetDetail(detail) {
        let name = Object.keys(detail)[0];
        let info = detail[name];
        let span_id = "";

        // Qiita doesn't provide an easy way to obtain this detail 
        // soo... not ideal but let's provide a way to get study 
        // links for various datasets
        let study_lookup = {'10317': ["American Gut: an Open Platform for Citizen Science Microbiome Research", 
                                      "https://msystems.asm.org/content/3/3/e00031-18"],
                            "850": ["Human gut microbiome viewed across age and geography", 
                                    "https://www.nature.com/articles/nature11053"],
                            "10297": ["Growth and Morbidity of Gambian Infants are Influenced by Maternal Milk Oligosaccharides and Infant Gut Microbiota", 
                                      "https://www.nature.com/articles/srep40466"],
                            "10080": ["The Fecal Microbial Community of Breast-fed Infants from Armenia and Georgia", "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5288704/"],
                            "10300": ["The Fecal Microbial Community of Breast-fed Infants from Armenia and Georgia", "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5288704/"],
                            "11076": ["Rapid change of fecal microbiome and disappearance of Clostridium difficile in a colonized infant after transition from breast milk to cow milk", "https://microbiomejournal.biomedcentral.com/articles/10.1186/s40168-016-0198-6"],
                            "11884": ["Natural history of the infant gut microbiome and impact of antibiotic treatment on bacterial strain diversity and stability", "https://stm.sciencemag.org/content/8/343/343ra81"],
                            "1454": ["Persistent gut microbiota immaturity in malnourished Bangladeshi children", "https://www.nature.com/articles/nature13421"],
                            "10249": ["Antibiotics, birth mode, and diet shape microbiome maturation during early life", "https://stm.sciencemag.org/content/8/343/343ra82"],
                            "11937": ["Gut Microbiota in the First 2 Years of Life and the Association with Body Mass Index at Age 12 in a Norwegian Birth Cohort", "https://mbio.asm.org/content/9/5/e01751-18"],
                            "10333": ["Walls talk: Microbial biogeography of homes spanning urbanization", "https://advances.sciencemag.org/content/2/2/e1501061"],
                            "10423": ["Geography and location are the primary drivers of office microbiome composition", "https://msystems.asm.org/content/1/2/e00022-16"],
                            "11358": ["Seasonal cycling in the gut microbiome of the Hadza hunter-gatherers of Tanzania", "https://science.sciencemag.org/content/357/6353/802"],
                             "2024": ["Microbiota at Multiple Body Sites during Pregnancy in a Rural Tanzanian Population and Effects of Moringa-Supplemented Probiotic Yogurt", "https://aem.asm.org/content/81/15/4965"],
                            "11993": ["Gut microbiota is associated with obesity and cardiometabolic disease in a population in the midst of Westernization", "https://www.nature.com/articles/s41598-018-29687-x"],
                            "10581": ["Cohort of human mothers and babies from El Salvador ", "https://www.ebi.ac.uk/ena/browser/view/ERP112775"],
                            "10352": ["Comparison of Fecal Collection Methods for Microbiota Studies in Bangladesh", "https://aem.asm.org/content/83/10/e00361-17"],
                            "11757": ["Regional variation limits applications of healthy gut microbiome reference ranges and disease models", "https://www.nature.com/articles/s41591-018-0164-x"],
                             "1481": ["Whole-grain wheat consumption reduces inflammation in a randomized controlled trial on overweight and obese subjects with unhealthy dietary and lifestyle behaviors: role of polyphenols bound to cereal dietary fiber", "https://academic.oup.com/ajcn/article/101/2/251/4494380"],
                            "10052": ["The microbiome of uncontacted Amerindians", "https://advances.sciencemag.org/content/1/3/e1500183"],
                             "1448": ["Subsistence strategies in traditional societies distinguish gut microbiomes", "https://www.nature.com/articles/ncomms7505"],
                             "1718": ["Infant time series", ""]
        }
        switch (name) {
            case "builtenv-16S-allsamples":
                span_id = "#dataset_links_builtenv";
                break;
            case "tmi-16S-gut":
                span_id = "#dataset_links_tmi";
                break;
            case "multipop-16S-gut":
                span_id = "#dataset_links_multipopgut";
                break;
            case "lifestage-16S-gut":
                span_id = "#dataset_links_lifestagegut";
                break;
            default:
                return;
        };

        let study_title = "";
        let study_url = "";
        let to_append = "";
        for (var qiita_id of info['qiita-study-ids']) {
            if(qiita_id in study_lookup) {
                study_title = study_lookup[qiita_id][0];
                study_url = study_lookup[qiita_id][1];
                to_append = '<li><h6 style="margin-bottom: 0px;">' + study_title + '</h6>'; //<span>' + study_title + '</span>';
                if(study_url !== "") {
                    to_append = to_append + '<a href="' + study_url + '">Publication link</a><br />';
                }
                to_append = to_append + '<a href="https://qiita.ucsd.edu/public/?study_id=' + qiita_id + '">Data access (Qiita study ' + qiita_id + ')</a>';
                to_append = to_append + '</li>';

                $(span_id).append(to_append).removeClass("spinner-grow spinner-grow-sm");
            }
        }
                
                    
            //$(span_id).append('<li><h6>' + study_title + '</h6><br /><span>' + study_title + '</span>
            //$(span_id).append('<li><a href="https://qiita.ucsd.edu/public/?study_id=' + qiita_id + '">Qiita Study: ' + qiita_id + '</li>').removeClass("spinner-grow spinner-grow-sm");
        //if (detail['qiita-study-ids'].length > 1)
        //    $("#dataset_meta_analysis").text(" (which was a meta analysis that combines the data you helped collect with other public microbiome results)").removeClass("spinner-grow spinner-grow-sm");
        //else
        //    $("#dataset_meta_analysis").text("").removeClass("spinner-grow spinner-grow-sm")
    }

    function refreshDatasets(state) {
        let url = state.public_endpoint + '/sample/list/dataset/' + state.barcode_prefix + state.sample_id;
        $.ajax({
            url: url,
            type: "GET",
            success: function(data)
            {
                for (var i = 0; i < data.length; i++) {
                    $.ajax({
                        url: state.public_endpoint + "/dataset/" + data[i],
                        type: "GET",
                        success: function (detail) {
                            addDatasetDetail(detail);
                        }
                    });
                }
                //Not sure that this will matter much longer, but for now
                //we still need to pick a single dataset for many of the queries
                //Need to pick a proper business rule to do that.
                //    For now, we'll prefer things named tmi-
                //    and we'll use 16S over WGS
                //if (data.length === 0)
                //{
                //    //Ack, this sample isn't in any datasets, pick one arbitrarily.
                //    state.dataset_input.value = "tmi-WGS-gut"
                //    return
                //}

                //var best_score = -1
                //var best_index = -1
                //for (var i = 0; i < data.length; i++)
                //{
                //    var score = 0
                //    if (data[i].includes("tmi-"))
                //        score += 1
                //    if (data[i].includes("WGS"))
                //        score += 1
                //    if (data[i].includes("gut") ||
                //        data[i].includes("oral") ||
                //        data[i].includes("skin"))
                //        score += 1

                //    if (score > best_score){
                //        best_score = score
                //        best_index = i
                //    }
                //}

                //if (data[best_index].includes("16S"))
                //{
                //    state.dataset_type.value = "16S"
                //}
                //else if (data[best_index].includes("WGS"))
                //{
                //    state.dataset_type.value = "WGS"
                //}
                //else
                //{
                //    console.log("Unknown dataset type")
                //    state.dataset_type.value = null
                //}

                //if (data[best_index].includes("oral"))
                //{
                //    state.dataset_site.value = "oral"
                //}
                //else if (data[best_index].includes("skin"))
                //{
                //    state.dataset_site.value = "skin"
                //}
                //else if (data[best_index].includes("gut"))
                //{
                //    state.dataset_site.value = "gut"
                //}
                //else
                //{
                //    console.log("Unknown dataset site")
                //    state.dataset_site.value = null
                //}

                // WARNING: FORCING 16S FOR RIGHT NOW FOR SCALE TESTING
                state.dataset_type.value = '16S';
                state.dataset_site.value = "gut";
                state.dataset_input.value = 'tmi-16S-gut';

                //state.dataset_input.value = data[best_index]
            }
        });
    }

    function populateSelect(select_selector, value_to_text, active_value){
        let select = $(select_selector);
        select.empty();
        for (let v in value_to_text)
        {
            let option = $('<option></option>')
                .attr("value", v)
                .text(v);
//                .text(value_to_text[v]);  //It should be this, but public api needs to send down friendly names

            if (v === active_value)
                option.attr('selected','selected');

            select.append(option);
        }
        select.prop("disabled", false);
    }

    function createTaxonomyTable(state)
    {
        $('#taxonomyTable').DataTable(
            {
                destroy: true, // Necessary to replace existing datatable
                ajax: {
                    url: state.public_endpoint + '/dataset/' + state.dataset_input.value + "/taxonomy/present/single/" + state.taxonomy + "/" + state.barcode_prefix + state.sample_id,
                    dataSrc: function(d){
                        let representatives = {};
                        let generaSums = {};
                        //Collapse to genera (Don't show separate rows per species)
                        for (let i = 0; i < d.data.length; i++){
                            //Can't just key by genus because genus can be null/undefined.  Argh.
                            let genus_key = d.data[i].Kingdom + ";" +
                                            d.data[i].Phylum + ";" +
                                            d.data[i].Class + ";" +
                                            d.data[i].Order + ";" +
                                            d.data[i].Family + ";" +
                                            d.data[i].Genus;
                            if (genus_key in generaSums)
                            {
                                generaSums[genus_key] += d.data[i].relativeAbundance;
                            }
                            else
                            {
                                representatives[genus_key] = d.data[i];
                                generaSums[genus_key] = d.data[i].relativeAbundance;
                            }
                        }
                        let newData = [];
                        for (let genus_key in generaSums){
                            let rep = representatives[genus_key];
                            let sum = generaSums[genus_key];
                            let relativeAbundance = (sum * 100)
                            if (relativeAbundance <= 0.001) {
                                continue;
                            }
                            rep.relativeAbundance = relativeAbundance.toFixed(3);
                            
                            for (var key of ["Kingdom", "Phylum", "Class", "Order", "Family", "Genus"]){
                                if (rep[key] != null && rep[key].startsWith("[") && rep[key].endsWith("]"))
                                    rep[key] = rep[key].substring(1,rep[key].length-1)
                            }
                            newData.push(rep);
                        }
                        return newData;
                    },
                },
                columns: [
                    {
                        data: "relativeAbundance",
                        render: $.fn.dataTable.render.percentBar('round','#FFF', '#269ABC', '#31B0D5', '#286090', 3, 'groove')
                    },
                    {data: "Kingdom"},
                    {data: "Phylum"},
                    {data: "Class"},
                    {data: "Order"},
                    {data: "Family"},
                    {data: "Genus"},
                ],
                order: [[ 0, "desc" ]],
                dom: "Bfrtip",
                buttons: [{extend: 'csv', className: 'btn btn-info', text: 'Download the spreadsheet'}],
                initComplete: function(settings) {
                    $('#taxonomyTable thead th').each(function () {
                       let $td = $(this);
                       let value = $td.text();
                       switch (value) {
                           case "Kingdom":
                               value = "The broadest classification like Bacteria, Archaea and Eukaryokes (what humans are!)";
                               break;
                           case "Phylum":
                               value = "Within the kingdom Eukarya, this is like the difference between humans and plants";
                               break;
                           case "Class":
                               value = "Within the phylum Chordata, this is along the lines of humans and fish";
                               break;
                           case "Order":
                               value = "Within the class Mammalia, this is like the difference between whales and a dogs";
                               break;
                           case "Family":
                               value = "With the order Carnivora are the families for dogs and cats";
                               break;
                           case "Genus":
                               value = "Within the family Canidae, you would find a genus for foxes and one for wolves";
                               break;
                           default:
                               value = "";
                               break; 
                       }
                       $td.attr('title', value);
                    });
                    
                    /* Apply the tooltips */
                    $('#taxonomyTable thead th[title]').tooltip(
                    {
                        container: 'body',
                        placement: 'auto'
                    });
                }
            }
        );
    }

    function retrieveNeighbors(state, k){
        let url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/diversity/beta/' + state.beta_metric + '/nearest';
        return $.ajax({
            method: "GET",
            url: url,
            data: {
                sample_id: state.barcode_prefix + state.sample_id,
                k:k
            }
        }).fail(function(result, textStatus, errorThrown){
            console.log("Couldn't retrieve neighbors" + textStatus)
        });
    }

    function fillNNResults(state, categories, chooserMap, selectorMap) {
        return function(samplesQueried, sampleResults) {
            // Count number of responses for each answer of each question
            let categoryCounts = {}
            let display = {}
            for (let i = 0; i < samplesQueried.length; i++) {
                for (let j = 0; j < categories.length; j++) {
                    let cat = categories[j]
                    if (!(cat in categoryCounts))
                        categoryCounts[cat] = {}
                    let val = sampleResults[i][j]
                    if (!(val in categoryCounts[cat]))
                        categoryCounts[cat][val] = 0
                    categoryCounts[cat][val] += 1
                }
            }

            for (let j = 0; j < categories.length; j++){
                let cat = categories[j]
                let sum = 0
                let maxval = -1
                let maxkey = null
                for (let key in categoryCounts[cat]) {
                    let val = categoryCounts[cat][key]
                    sum += val
                    if (key !== "Not provided" && val > maxval) {
                        maxval = val
                        maxkey = key
                    }
                }

                let me = samplesQueried.indexOf(state.barcode_prefix + state.sample_id);
                let my_cat = categories.indexOf(cat);
                let my_value = sampleResults[me][my_cat];
                let set_color = null;

                let chosen = null
                if (!(cat in chooserMap) || chooserMap[cat]["type"] === "max") {
                    chosen = maxkey
                    if(chosen === my_value) {
                        set_color = 'similarity-fontstyle-same';
                    } else {
                        set_color = 'similarity-fontstyle-different';
                    }
                }
                else if (chooserMap[cat]["type"] === "specified")
                    chosen = chooserMap[cat]["value"]
                else if (chooserMap[cat]["type"] === "same") {
                    me = samplesQueried.indexOf(state.barcode_prefix + state.sample_id)
                    j = categories.indexOf(cat)
                    chosen = sampleResults[me][j]
                }
                display[cat] = {}
                display[cat]["response"] = chosen
                display[cat]["value"] = Math.round((categoryCounts[cat][chosen] / sum) * 100) + "%"
                display[cat]["color"] = set_color;
            }

            for (let cat of categories) {
                if (!(cat in selectorMap))
                    continue;
                let resp_selector = selectorMap[cat][0]
                let val_selector = selectorMap[cat][1]
                let resp = display[cat]["response"]
                let val = display[cat]["value"]
                let color = display[cat]["color"]

                $(val_selector).text(val).removeClass("spinner-grow spinner-grow-sm");
                if(color !== null) {
                    $(resp_selector).text(resp).removeClass("spinner-grow spinner-grow-sm text-success").addClass(color);
                } else {
                    $(resp_selector).text(resp).removeClass("spinner-grow spinner-grow-sm");
                }

                
            }

        }
    }


    function queryNeighborAndSelfMetadata(state, metadata_cats){
        return function(result, textStatus, jqXHR)
        {
            let toQuery = result;
            toQuery.push(state.barcode_prefix + state.sample_id);

            return $.ajax(
            {
                method: "POST",
                url: state.public_endpoint + '/dataset/' + state.dataset_input.value + "/metadata/values?" + $.param({ cat: metadata_cats }, true), // The true indicates traditional mode, which produces cat=blah&cat=blah rather than cat[]=blah&cat[]=blah which crashes the server.
                data: JSON.stringify(toQuery),
                contentType: "application/json"
            }).fail(function(result, textStatus, errorThrown){
                console.log("Couldn't retrieve metadata for neighbors and self " + errorThrown)
            }).then(function(result, textStatus, jqXHR){
                let thenner = {};
                thenner.then = function(func){
                    // Need to pass on the sample ids. Argh.
                    return func(toQuery, result);
                };
                return thenner;
            });
        };
    }

    function updateCompare(state){
        // Reset all the fields to spinners
        $(".info-loader").empty().addClass("spinner-grow spinner-grow-sm");

        // Stuff to fill in:
        // sample_type, n_bacteria, n_archaea, dataset_name,
        // n_bacteria_background, n_archaea_background,
        // age_nearest_neighbor, more_or_less_sweets_nearest_neighbor

        function retrieveText(method, url, data){
            return $.ajax({
                method: method,
                url: url,
                data: JSON.stringify(data),
                contentType: "application/json"
            }).fail(function(result, textStatus, errorThrown){
                console.log("Couldn't retrieve text for " + method + " " + url);
            });
        }

        function setInfoText(resultSelector){
            return function(result, textStatus, jqXHR){
                return $(resultSelector).text(result).removeClass("spinner-grow spinner-grow-sm");
            };
        }

        function fillResults(state, selectors)
        {
            return function(samplesQueried, sampleResults)
            {
                // First selector, age, Second selector, sweets
                // No similarity between the two, so we just have to handle both
                let me = samplesQueried.pop();
                let my_data = sampleResults.pop();

                if (me !== (state.barcode_prefix + state.sample_id))
                    console.log("Bad call to fill results, sample id mismatch");

                for (let selector_index = 0; selector_index < selectors.length; selector_index++)
                {
                    if (selectors[selector_index] === "#age_nearest_neighbor")
                    {
                        // Find age of first neighbor with age
                        let nearest_age = "Unspecified";
                        for (let i = 0; i < samplesQueried.length; i++)
                        {
                            if (sampleResults[i][selector_index] !== "Unspecified")
                            {
                                nearest_age = Math.round(sampleResults[i][selector_index]);
                                break;
                            }
                        }
                        if (nearest_age === "Unspecified")
                            setInfoText(selectors[selector_index])("chose not to provide their age", null, null);
                        else
                            setInfoText(selectors[selector_index])("is " + nearest_age + " years old", null, null);
                    }
                    if (selectors[selector_index] === "#more_or_less_sweets_nearest_neighbor")
                    {
                        // Find string value for first neighbor with a string value
                        let nearest_sweets = "Unspecified";
                        for (let i = 0; i < samplesQueried.length; i++)
                        {
                            if (sampleResults[i][selector_index] !== "Unspecified" &&
                                sampleResults[i][selector_index] !== "Not provided")
                            {
                                nearest_sweets = sampleResults[i][selector_index];
                                break;
                            }
                        }

                        // Comparing metadata is an absolute nightmare.
                        let possible_values = {
                            "Unspecified" : NaN,
                            "Not provided" : NaN,
                            "Never" : 0,
                            "Rarely (less than once/week)" : 1,
                            "Occasionally (1-2 times/week)" : 2,
                            "Regularly (3-5 times/week)" : 3,
                            "Daily": 4
                        }

                        let my_sweets = possible_values[my_data[selector_index]];
                        let their_sweets = possible_values[nearest_sweets];

                        let info_text = "";
                        if (isNaN(my_sweets)){
                            if (isNaN(their_sweets))
                                info_text = "chose not to say how many sweets they eat";
                            else
                                info_text = nearest_sweets.toLowerCase() + " eats sweets";
                        }
                        else{
                            if (my_sweets < their_sweets)
                                info_text = "eats more sugary sweets than you";
                            else if (my_sweets > their_sweets)
                                info_text = "eats fewer sugary sweets than you";
                            else if (my_sweets === their_sweets)
                                info_text = "eats about the same number of sugary sweets as you";
                            else
                                info_text = "chose not to say how many sweets they eat";
                        }

                        setInfoText(selectors[selector_index])(info_text, null, null);
                    }
                }
            }
        }

        $("#sample_type").text(state.sample_type).removeClass("spinner-grow spinner-grow-sm");
        $("#dataset_name").text(state.dataset_input.value).removeClass("spinner-grow spinner-grow-sm");
        // TODO: Fill in these URLs
        retrieveText("GET", state.public_endpoint + "/dataset/" + state.dataset_input.value + "/taxonomy/single/" + state.taxonomy + "/" + state.barcode_prefix + state.sample_id + "/counts?level=Kingdom", null).then(
            function(result, textStatus, jqXHR){
                $("#n_bacteria").text(result["Bacteria"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
                $("#n_archaea").text(result["Archaea"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
            });
        retrieveText(
            "POST",
            state.public_endpoint + "/dataset/" + state.dataset_input.value + "/taxonomy/group/" + state.taxonomy + "/counts?level=Kingdom",
            {"sample_ids":[]}
        ).then(
            function(result, textStatus, jqXHR){
                $("#n_bacteria_background").text(result["Bacteria"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
                $("#n_archaea_background").text(result["Archaea"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
            });
        retrieveNeighbors(state, 1)
            .then(queryNeighborAndSelfMetadata(state, ["age_years", "sugary_sweets_frequency"]))
            .then(fillResults(state, ["#age_nearest_neighbor", "#more_or_less_sweets_nearest_neighbor"]));
    }

    function updateDiversity(state){
        //https://www-dev.ucsd.edu/results-api/diversity/alpha/group/faith_pd?summary_statistics=true

        const more_than_30_plants =
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "types_of_plants",
                                "operator": "equal",
                                "value": "More than 30"
                            }
                        ]
                    }
            };
        const water_frequency = 
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "one_liter_of_water_a_day_frequency",
                                "operator": "equal",
                                "value": "Regularly (3-5 times/week)"
                            }
                        ]
                    }
            };
        const exercise_regularly =
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "exercise_frequency",
                                "operator": "equal",
                                "value": "Regularly (3-5 times/week)"
                            }
                        ]
                    }
            };
        //I wish we had ordered categorical variables because this query is stupid
        const sleep_more_than_6_hrs =
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "sleep_duration",
                                "operator": "equal",
                                "value": "6-7 hours"
                            },
                            {
                                "id": "sleep_duration",
                                "operator": "equal",
                                "value": "7-8 hours"
                            },
                            {
                                "id": "sleep_duration",
                                "operator": "equal",
                                "value": "8 or more hours"
                            }
                        ]
                    }
            }

        const POST_DATA = {
            "plants": more_than_30_plants,
            "water": water_frequency,
            "exercise": exercise_regularly,
            "sleep": sleep_more_than_6_hrs
        }

        const SELECTORS = {
            "plants": "#diversity_30_plants_per_week",
            "water": "#diversity_water_regularly",
            "exercise": "#diversity_exercise_regularly",
            "sleep": "#diversity_sleep_alot"
        }

        // We override the default alpha_metric from state for this page.
        let alpha_metric = "observed_features"
        for (let key in POST_DATA) {
            $.ajax(
                {
                    url: state.public_endpoint + "/dataset/" +
                        state.dataset_input.value +
                        "/diversity/alpha/group/" +
                        alpha_metric + "?" + $.param({summary_statistics: true}),
                    method: "POST",
                    data: JSON.stringify(POST_DATA[key]),
                    contentType: "application/json",
                    success: function (data) {
                        let display = data["group_summary"]["median"]
                        $(SELECTORS[key]).text(display).removeClass("spinner-grow spinner-grow-sm");
                    }
                }).fail(function (result, textStatus, errorThrown) {
                console.log("Couldn't retrieve alpha metrics (" + key + ")")
            });
        }
        $.ajax(
            {
                url: state.public_endpoint + "/dataset/" + 
                    state.dataset_input.value +
                    "/diversity/alpha/single/" +
                    alpha_metric + "/" + state.barcode_prefix + state.sample_id,
                method: "GET",
                contentType: "application/json",
                success: function (data) {
                    let display = data["data"]
                    $("#diversity_in_sample").text(display).removeClass("spinner-grow spinner-grow-sm");
                }
            }).fail(function (result, textStatus, errorThrown) {
            console.log("Couldn't retrieve alpha metric for the sample")
        });

    }

    function updateSimilarity(state){
        const K = 100 // However many neighbors we want to pull metadata for
        const SELECTOR_MAP = {
            "types_of_plants": ["#beta_diversity_plants_per_week_response", "#beta_diversity_plants_per_week_value"],
            "probiotic_frequency": ["#beta_diversity_probiotics_response", "#beta_diversity_probiotics_value"],
            "exercise_frequency": ["#beta_diversity_exercise_response", "#beta_diversity_exercise_value"],
            "age_years": ["#beta_diversity_age_response", "#beta_diversity_age_value"],
            //"diet": ["",""],
            "diet_type": ["#beta_diversity_diet_type_response", "#beta_diversity_diet_type_value"],
            "multivitamin": ["#beta_diversity_multivitamin_response", "#beta_diversity_multivitamin_value"],
            "sleep_duration": ["#beta_diversity_sleep_response", "#beta_diversity_sleep_value"],
            "sex":  ["#beta_diversity_sex_response", "#beta_diversity_sex_value"]
        }
        const CHOOSER = {
            "types_of_plants": {"type": "max"},
            "probiotic_frequency": {"type": "max"},
            "exercise_frequency": {"type": "max"},
            "age_years": {"type": "same"},
            //"diet": {"type": "same"},
            "diet_type": {"type": "same"},
            "multivitamin": {"type": "specified", "value": true},
            "sleep_duration": {"type": "max"},
            "sex":  {"type": "same"}
        }
        const CATEGORIES = []
        for (let key in SELECTOR_MAP)
            CATEGORIES.push(key)

        retrieveNeighbors(state, K)
            .then(queryNeighborAndSelfMetadata(state, CATEGORIES))
            .then(fillNNResults(state, CATEGORIES, CHOOSER, SELECTOR_MAP)) //TODO: Switch from logging to filling in divs by adding selectors here
    }

    function updateTaxonomy(taxonomyData, state){
        // Rebuild taxonomy table when we switch dataset
        createTaxonomyTable(state);

        //Need to make taxa rank plot
        let sampling_url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/taxonomy/ranks/taxonomy?' +
            $.param({sample_size: 30000});
        let my_sample_url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/taxonomy/ranks/taxonomy/sample/' + state.barcode_prefix + state.sample_id;

        let query1 = $.ajax({
            url: sampling_url,
            type: "GET"
        });

        let query2 = $.ajax({
            url: my_sample_url,
            type: "GET"
        });

        $.when(query1, query2).done(function(sampling_results, sample_results){
            let X = 10;
            let topXOrdered = sampling_results[0]["Taxa-order"].slice(0,X);
            $("#top_ranked_genus_from_plot").text(topXOrdered[0]).removeClass("spinner-grow spinner-grow-sm");

            topXOrdered.reverse();
            let topX = new Set(topXOrdered);

            let sampling_x = [];
            let sampling_y = [];
            let sample_x = [];
            let sample_y = [];

            for (let i =0; i < sampling_results[0].Rank.length; i++)
            {
                if (topX.has(sampling_results[0].Taxon[i]))
                {
                    sampling_x.push(sampling_results[0].Rank[i]);
                    sampling_y.push(sampling_results[0].Taxon[i]);
                }
            }

            for (let i = 0; i < sample_results[0].Rank.length; i++)
            {
                if (topX.has(sample_results[0].Taxon[i]))
                {
                    sample_x.push(sample_results[0].Rank[i]);
                    sample_y.push(sample_results[0].Taxon[i]);
                }
            }

            let trace1 = {
                "name": "Rank Distributions",
                "showlegend": false,
                "spanmode": "hard",
                "type": "violin",
                "x": sampling_x,
                "y": sampling_y,
                "orientation": "h",
                "box": {
                    "visible": true
                },
                "meanline": {
                    "visible": true
                },
            };

            let trace2 = {
                "type": "scatter",
                "mode": "markers",
                "name": "My Sample",
                "x": sample_x,
                "y": sample_y
            };
            let data = [trace1, trace2];
            let layout = {
                "title": "How abundant are my microbes compared to everyone in Microsetta?",
                "hovermode": false,
                "yaxis": {
                    "title": "Common types of microbes",
                    "automargin": true,
                    "categoryorder": "array",
                    "categoryarray": topXOrdered
                },
                xaxis: {
                    title: '← Least Abundant | Most Abundant →'
                }
            };
            Plotly.newPlot("taxa-violin", data, layout, {displayModeBar: false});
        });
    }

    function updateDatasetDetails(state){
        $.ajax(
            {
                url: state.public_endpoint + "/dataset/" + state.dataset_input.value,
                success: function(data)
                {
                    var info = data[state.dataset_input.value]
                    if (info == null)
                        return
                    $("#dataset_title").text(info.title).removeClass("spinner-grow spinner-grow-sm");
                    if (info.datatype === "WGS"){
                        $("#dataset_datatype").text("whole genome sequencing, a technique that produces a large number of small DNA sequences from all of the microbial genomes in your sample. With enough sequences you can even see the variation that exists between microbes of the same species. ").removeClass("spinner-grow spinner-grow-sm");
                    }
                    else if (info.datatype === "16S"){
                        $("#dataset_datatype").text('16S.  This technique produces DNA sequences from a specific variable region ("V4") within a microbial gene ("the 16S small subunit ribosomal gene"). DNA sequences from this region of this gene can be used like a microbial barcode, providing researchers with evidence of the types of microbes that may be present in your sample.').removeClass("spinner-grow spinner-grow-sm");
                    }
                    else {
                        $("#dataset_datatype").text(info.datatype).removeClass("spinner-grow spinner-grow-sm");

                    }
                },
                function(result, textStatus, errorThrown){
                    console.log("Couldn't retrieve text for " + method + " " + url);
                }
            }
        );


    }

    //Called immediately after a tab is shown
    function onTabShown(evt){
        if (evt.target.id === "similarity-tab")
        {
            // Emperor doesn't seem to understand that the tab has been shown
            // by default.  So we'll trigger a resize event on the window
            // which emperor already links to resize all of its controls.
            // Stupid, but it seems to work, whereas setting width on any of
            // the emperor controls doesn't seem to trigger necessary resizing
            // of the webGL scene
            window.dispatchEvent(new Event('resize'));
        }
    }

    function enableTooltips(){
      $('.tooltipper').tooltip({position: "bottom"});
    }

    function setupAccordions() {
        let acc = document.getElementsByClassName("accordion-microbiome-map");
        let i;
        for (i = 0; i < acc.length; i++) {
            acc[i].addEventListener("click", function () {
                /* Toggle between adding and removing the "active" class,
          to highlight the button that controls the panel */
                this.classList.toggle("active");
                /* Show/closes  the active panel */
                let panel = this.nextElementSibling;
                if (panel.style.maxHeight) {
                    panel.style.maxHeight = null;
                } else {
                    panel.style.maxHeight = panel.scrollHeight + "px";
                }
            });
        }
    }

    function init(){
        enableTooltips();
        setupAccordions();

        // Hook up fake tab links
        $('.fake-tab').click(function() {
            let link = this.dataset.link;
            $(link)[0].click();
        });

        // Listen for tab changes
        $('.nav-link').on('shown.bs.tab', onTabShown);

        let state = {};

        // Initialize state
        state.dataset_input = new NamedExpression("Dataset", "Loading...");
        //oral/gut/skin
        state.dataset_site = new NamedExpression("Dataset-Site", "Loading...");
        //16S/WGS
        state.dataset_type = new NamedExpression("Dataset-Type", "Loading...");
        state.known_datasets = [];

        state.taxonomy = "{{taxonomy}}";
        state.alpha_metric = "{{alpha_metric}}";
        state.beta_metric = "{{beta_metric}}";
        //Just using test barcode because I can never remember a valid one.
        // DONT MERGE WITH FAKE BARCODE HERE.
        state.sample_id = "{{sample.sample_barcode}}";
        //state.sample_id = "000023984";
        //state.sample_id = "000004220";
        //state.sample_id = "000023127";

        state.barcode_prefix = "{{barcode_prefix}}";
        state.public_endpoint = "{{public_endpoint}}";
        let sample_type = "oral";
        if ("{{sample.sample_site}}" === "Stool")
            sample_type="fecal";
        state.sample_type = sample_type;

        /* Whenever dataset is changed, we fire off ajax requests
           to grab new info for the plots.  */
        new DelegateOutput(function(dataset){

            // Magic string must match default string used to initialize select box
            if (dataset === "Loading...")
                return;

            //TODO: Decide how to tell each control it is waiting on ajax data
            //updateTaxonomy(null, state);

            let taxonomyData = { "result": "Taxonomy AJAX: " + dataset };

            updateCompare(state);
            updateDiversity(state);
            updateSimilarity(state);
            updateTaxonomy(taxonomyData, state);
            updateDatasetDetails(state);

            //buildMicrobialMapsPlots(state);
            getMicrobiomeMapsRasterizedPlots(state);
        }, state.dataset_input);

        refreshDatasets(state);
    }

    $(document).ready(init);
</script>
{% endblock %}

{% block breadcrumb %}
    <li class="breadcrumb-item"><a href="/accounts/{{account_id}}">Account</a></li>
    <li class="breadcrumb-item"><a href="/accounts/{{account_id}}/sources/{{source_id}}">Source</a></li>
    <li class="breadcrumb-item active" aria-current="page">Results</li>
{% endblock %}

{% block content %}
<div class="tmi-content scatter-bg">
<div class="row">
    <div class="col-sm-auto full-height">
        <div class="nav-white-bg row">
          <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical" style="padding-right:20px;">
            <a class="nav-link active" id="compare-tab" data-toggle="pill" href="#compare" role="tab" aria-controls="compare" aria-selected="true">How do you compare?</a>
            <a class="nav-link" id="diversity-tab" data-toggle="pill" href="#diversity" role="tab" aria-controls="diversity" aria-selected="false">Diversity</a>
            <a class="nav-link" id="similarity-tab" data-toggle="pill" href="#similarity" role="tab" aria-controls="similarity" aria-selected="false">Similarity</a>
            <a class="nav-link" id="taxonomy-tab" data-toggle="pill" href="#taxonomy" role="tab" aria-controls="taxonomy" aria-selected="false">Your Inner Zoo</a>
            <a class="nav-link" id="microbial-map-tab" data-toggle="pill" href="#microbial-map" role="tab" aria-controls="microbial-map" aria-selected="false">Microbiome Map</a>
            <a class="nav-link" id="dataset-tab" data-toggle="pill" href="#dataset-info" role="tab" aria-controls="dataset" aria-selected="false">How can I learn more?</a>
          </div>
        </div>
    </div>

    <div class="col-sm border" style="background-color:#fff">
        <div class="tab-content" id="v-pills-tabContent">
          <div class="tab-pane fade show active" id="compare" role="tabpanel" aria-labelledby="compare-tab">
            <div class="column results_text">
                <h3>How do you compare?</h3>
                <img class="diversity-banner" src='/static/img/hero-home-4-xl.jpeg'>
                <br/>
                <p>
                    Your microbiome is a rainforest of diverse microbes dominated
                    by microbes - some 40 trillion bacteria, weighing around 1 lb,
                    live all over and in your body. The diversity of your
                    microbiome, how similar it is to other peoples', and the types
                    of bacteria living inside you have all been linked to health,
                    disease and lifestyle traits in numerous studies. 
                </p>

                <p>
                Scientists often use many different approaches to see how your
                microbiome differs. We've analyzed your microbiome sample using
                standard microbiome research tools, and the results are broken
                down below in a few different categories:
                </p>

                <div class="how_you_compare_section">
                    <h4>Diversity</h4>
                    <p>
                    How many kinds of microbes were in your sample?
                    Check out your <a class="fake-tab" 
                    href="#diversity" data-link="#diversity-tab">Diversity</a>.
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>Similarity</h4>
                    <p>
                    What kinds of people have microbiomes like yours? Check out
                    your microbiome <a class="fake-tab" href="#similarity" 
                    data-link="#similarity-tab">Similarity</a>.
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>Your Inner Zoo</h4>
                    <p>
                    What particular kinds of microbes are in your sample?
                    Wander through <a class="fake-tab" href="#taxonomy" data-link="#taxonomy-tab">Your Inner Zoo</a>. 
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>Microbiome Map</h4>
                    <p>
                    Where are you on the <a class="fake-tab" href="#microbial-map" data-link="#microbial-map-tab">Microbiome Map</a>?
                    </p>
                </div>
              </div>
          </div>
          <div class="tab-pane fade" id="diversity" role="tabpanel" aria-labelledby="diversity-tab">
              <div class="column results_text">
                  <h3>Diversity</h3>
                  <br>
                  <p>
                   There are anywhere from hundreds of millions to hundreds of
                   billions of different types of bacteria living on planet earth.
                   This dwarfs the meager 2 million different kinds of animals
                   and plants that you can see with your eyes. The
                   <span id="average-us-tooltip" class="tooltipper"
                   data-title="Based on fecal samples from Microsetta participants in the United States">average</span>
                   American has <strong>97</strong> different types of microbes in a stool sample, which is
                   lower than what we find in people living a more hunter-gatherer
                   lifestyle, like the <strong>131</strong> microbes we find in samples from the 
                   <span id="taxa-tooltip" class="tooltipper"
                   data-title="The Hadza are an indigenous hunter-gather group in Tanzania. The summary of the Hadza microbiome is based on <a href='foobar.com'>Smits et al. Science 2017</a>" data-html="true">Hadza</span>.
                  </p>

                  <div class="card your_sample_diversity_inset">
                      <div class="card-header">Number of different microbes found in your sample</div>
                      <div class="card-body">
                          <span id="diversity_in_sample" class="info-loader">...</span></h5>
                      </div>
                  </div>

                  <p>
                    When we calculated the diversity of groups of samples in our database,
                    we found that diversity is associated with how you live your life.
                    Here, we summarized the average microbiome diversity for a few
                    questionnaire responses, specifically people who eat more than 30
                    plants a week, exercise regularly, drink water regularly, or sleep
                    more than 6 hours a night.
                  </p>

                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/vegetables.png'>
                          <div class="diversity-text">
                            <div class="diversity-category">
                              Eat more than 30 plants a week
                            </div>
                            <div class="diversity-info">
                              <span id="diversity_30_plants_per_week" class="info-loader text-success">...</span> unique microbial features
                            </div>
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/exercise.png'>
                          <div class="diversity-text">
                            <div class="diversity-category">
                              Exercise regularly
                            </div>
                            <div class="diversity-info">
                              <span id="diversity_exercise_regularly" class="info-loader text-success">...</span> unique microbial features
                            </div>
                          </div>
                      </div>
                  </div>
                  <div class="row mb-2">
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/fermented.png'>
                          <div class="diversity-text">
                            <div class="diversity-category">
                              Drink 1L or water regularly
                            </div>
                            <div class="diversity-info">
                              <span id="diversity_water_regularly" class="info-loader text-success">...</span>  unique microbial features
                            </div>
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/sleep.png'>
                          <div class="diversity-text">
                              <div class="diversity-category">
                                Sleep more than 6 hours per night
                              </div>
                              <div class="diversity-info">
                                <span id="diversity_sleep_alot" class="info-loader text-success">...</span> unique microbial features
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="tab-pane fade" id="similarity" role="tabpanel" aria-labelledby="similarity-tab">
              <div class="column results_text">
                  <h3>Similarity</h3>
                  <br>
                  <p>
                  One of the powerful ways microbiome scientists analyze data
                  is by looking at similarities among samples. To do this,
                  we compute a <span id="similarity-tooltip" class="tooltipper" 
                  data-html="true" data-title="
                  There are <i>a lot</i> of ways to form a distance. One way is
                  to base the distance off of the fraction of microbes in
                  common in your sample with each other sample. We typically share
                  few of the exact same microbes in common with other people though
                  which is problematic when comparing exact microbes. To account for 
                  this, researchers often take the evolutionary relationships among microbes
                  into account when forming these distances.">distance</span> from your sample to all 
                  other samples based on the microbes observed. 
                  </p>

                  <p>
                  Here, we compared your sample to all the others in our database, and examined the 100
                  most similar samples to yours. These people answered their
                  questionnaires in the following way; the response is colored in 
                  <span class="similarity-fontstyle-same">light green</span> if it matches your 
                  response and <span class="similarity-fontstyle-different">brown</span> if your response differed. 
                  </p>

                  <div id="beta-diversity-comparisons">
                  </div>


                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Diet</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/vegetables.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_plants_per_week_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours eat 
                              <span id="beta_diversity_plants_per_week_response" class="info-loader text-success">...</span>
                              plants per week
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/diet.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_diet_type_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours had a similar diet
                          </div>
                      </div>
                  </div>

                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Supplements</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/probiotics.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_probiotics_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours
                              <span id="beta_diversity_probiotics_response" class="info-loader text-success">...</span>
                              take probiotics
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/vitamins.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_multivitamin_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours take vitamins
                          </div>
                      </div>
                  </div>
                  
                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Activity</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/exercise.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_exercise_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours exercise 
                              <span id="beta_diversity_exercise_response" class="info-loader text-success">...</span>
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/sleep.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_sleep_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours get
                              <span id="beta_diversity_sleep_response" class="info-loader text-success">...</span>
                              of sleep at night
                          </div>
                      </div>
                  </div>
                  
                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Demographic</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/age.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_age_value" class="info-loader font-weight-bold">...</span> 
                              of people with a microbiome like yours were the same age as you
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/gender.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              <span id="beta_diversity_sex_value" class="info-loader font-weight-bold">...</span>
                              of people with a microbiome like yours were the same gender
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="tab-pane fade" id="taxonomy" role="tabpanel" aria-labelledby="taxonomy-tab">
              <div class="row">
                  <div class="column results_text">
                    <h3>Your Inner Zoo (aka What's in your sample?)</h3>
                    <br>
                    <p>
                    Below you will find a table of all of the different
                    microbes we found in your sample, and their proportions.
                    </p>
                    
                    <p>
                    Microbes sometimes have difficult names to pronounce. Some of the names are Latin, Greek, Norse, Chinese and more. If you'd like to know more, a pronounciation guide can be found <a href="https://www.atsu.edu/faculty/chamberlain/Website/studio.htm">here</a>.
                    </p>

                    <p>
                    Please mouse over the header to learn more about how to interpret these taxonomic ranks (e.g., Kingdom) using examples of non-microbial organisms.
                    </p>
                    
                    <div style="padding:10px">
                      <table id="taxonomyTable" class="display" style="width:100%">
                        <thead>
                        <tr>
                          <th>% of Sample</th>
                          <th>Kingdom</th>
                          <th>Phylum</th>
                          <th>Class</th>
                          <th>Order</th>
                          <th>Family</th>
                          <th>Genus</th>
                        </tr>
                        </thead>
                      </table>
                    </div>
                  </div>
              </div>
              <hr/>
              <div class="row">
                  <div class="column results_text">
                    <p>
                    In the plot below, you can see the most commonly observed
                    microbial genera in the dataset, and distribution of ranks for
                    those genera.  For example, <span id="top_ranked_genus_from_plot" class="info-loader text-success" >TOP_RANKED_GENUS_FROM_PLOT</span>
                    typically have the highest relative abundance of samples in the
                    dataset.
                    </p>
                  </div>
              </div>
              <div class="row">
                  <div class="col-md-8 mx-auto">
                  <div id="taxa-violin">
                  </div>
              </div>
          </div>
        </div>
          <div class="tab-pane fade" id="dataset-info" role="tabpanel" aria-labelledby="dataset-tab">
            <div class="row">
              <div class="column results_text">
                <h3>How can I learn more?</h3>
                <br/>
                  <p>
                  Microbiome analysis is a burgeoning new field, and the information
                  displayed here is only an example of what is becoming possible
                  thanks to the data that you helped collect.
                  </p>

                  <p>
                  So if you want to learn more, you can even take a look at the dataset for yourself!
                  </p>
                  
                  <p>
                  For your sample, we performed a technique called amplicon sequencing where we examine
                  pieces of DNA corresponding to a particular gene. Specifically, we sequenced the fourth
                  variable region ("V4") of the 16S rRNA small subunit ribosomal gene. DNA sequences from this 
                  region of this gene can be used like a microbial barcode, providing researchers evidence of 
                  the types of microbes that may be present in your sample.
                  </p>

                  <p>
                  There are many resources for microbiome information available online. If you'd like to learn
                  more, we recommend the <a href="https://asm.org/Browse-By-Topic/Newsroom/Clinical/Microbiome">American Society for Microbiology</a>, 
                  <a href="https://microbe.net/">microBEnet</a>, the <a href="http://www.probioticchart.ca/">Canadian Probiotics Chart</a>, and the <a href="https://gastro.org/aga-leadership/centers/aga-center-for-gut-microbiome-research-education/">American Gastroenterological Association</a>. 
                  </p>

                  <h4 style="color:black;">Datasets used in your results report</h4>
                  <p>
                  The results shown in the Microbiome Maps portion of the
                  report relied on data from many different publically
                  accessible microbiome datasets. These different datasets, and
                  links to them, are listed below.
                  </p>

                  <h5>The Microsetta Initiative</h5>
                  <ul>
                        <span id="dataset_links_tmi" class="info-loader text-success" >DATASET_LINKS</span>
                  </ul>
                  </br>
                  <h5>Microbiomes Across the World</h5>
                  <ul>
                        <span id="dataset_links_multipopgut" class="info-loader text-success" >DATASET_LINKS</span>
                  </ul>
                  </br>
                  <h5>Microbiomes Across the Lifespan</h5>
                  <ul>
                        <span id="dataset_links_lifestagegut" class="info-loader text-success" >DATASET_LINKS</span>
                  </ul>
                  </br>
                  <h5>Microbiomes in the Environment</h5>
                  <ul>
                        <span id="dataset_links_builtenv" class="info-loader text-success" >DATASET_LINKS</span>
                  </ul>
                  </br>
              </div>
            </div>
          </div>
          <div class="tab-pane fade" id="microbial-map" role="tabpanel" aria-labelledby="microbial-map-tab">
            <div class="row">
              <div class="column results_text">
                <h3>Microbiome Map</h3>
                <br/>
                <p>
                Microbiome maps turn the similarities and differences among
                microbiomes into a two-dimensional picture. Each dot is a whole
                microbiome, and dots close to yours are more similar
                microbiomes. 
                </p>

                <p>
                    <span id="microbiome-maps-tooltip" class="tooltipper" 
                    data-title="Visualizing complex data is difficult. One way
                microbiome researchers do it is through a technique
                called principal coordinates analysis (PCoA). We provide
                PCoA with the millions of microbiome similarities we compute
                (we use tens of thousands of samples, and compare each sample
                to each other), and in turn, PCoA provides perspectives into a
                massive data matrix that place very similar samples near each 
                other and less similar samples far apart.">How are these maps produced?</span>
                </p>
    
                <div id="microbiome-map-all-tmi-accordian">
                    <button class="accordion-microbiome-map">
                        <h4 class="diversity-header">Microbiomes Across the Body</h4>
                    </button>
                    <div class="accordion-panel-microbiome-map" style="">
                        <div class="row">
                            <div class="col-5">
                                <div id="pcoa-tmi-all-samples" >
                                    <img id="pcoa-tmi-all-samples-img" src="#" alt="img" class="img-fluid"/>
                                </div>
                            </div>
                            <div class="col microinfo">
                                <p>
                                    In this map, we’ve placed your sample relative to all the
                                    other samples we have in Microsetta. As you can see, there
                                    are a few different types of samples people have
                                    contributed, and the microbial configurations present can
                                    be REALLY different. 
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="microbiome-map-multipop-region-accordian">
                    <button class="accordion-microbiome-map">
                        <h4 class="diversity-header">Microbiomes Across the World</h4>
                    </button>
                    <div class="accordion-panel-microbiome-map" style="">
                        <div class="row">
                            <div class="col-5">
                                <div id="pcoa-multipopulation-region">
                                    <img id="pcoa-multipopulation-region-img" src="#" alt="img" class="img-fluid"/>
                                </div>
                            </div>
                            <div class="col microinfo">
                                <p>
                                Researchers have noted large differences in our
                                microbiomes depending on where we live. The reason WHY
                                is not well understood, but we suspect factors such as
                                diet or environmental exposures (e.g., plants, what’s
                                in your house, pollution, how often you come in contact
                                with soil, etc) may be be major factors.
                                </p>

                                <p>
                                Researchers do not know how much these differences
                                matter! They certainly may. 
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="microbiome-map-multipop-lifestage-accordian">
                    <button class="accordion-microbiome-map">
                        <h4 class="diversity-header">Microbiomes Across the Lifespan</h4>
                    </button>
                    <div class="accordion-panel-microbiome-map" style="">
                        <div class="row">
                            <div class="col-5">
                                <div id="pcoa-multipopulation-lifestage">
                                    <img id="pcoa-multipopulation-lifestage-img" src="#" alt="img" class="img-fluid"/>
                                </div>
                            </div>
                            <div class="col microinfo">
                                <p>
                                One major factor associated with gut
                                microbiomes is the age of the individual,
                                emphasized here by life stages.
                                </p>

                                <p>
                                Interestingly, infants are relatively similar
                                microbially regardless of where they were born.
                                But, as individuals age, it seems like their
                                microbiomes reflect regional or population
                                differences.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="microbiome-map-builtenv-accordian">
                    <button class="accordion-microbiome-map">
                        <h4 class="diversity-header">Microbiomes in the Environment</h4>
                    </button>
                    <div class="accordion-panel-microbiome-map" style="">
                        <div class="row">
                            <div class="col-5">
                                <div id="pcoa-builtenv">
                                    <img id="pcoa-builtenv-img" src="#" alt="img" class="img-fluid"/>
                                </div>
                            </div>
                            <div class="col microinfo">
                                <p>
                                Microbes are EVERYWHERE though! Using these
                                same techniques described above, we compared
                                your microbiome to samples collected from all
                                over the surfaces from a brand new hospital.
                                </p>

                                <p>
                                As you can see, skin samples tend to more
                                closely resemble those from "the built
                                environment", which makes sense as skin cells
                                are constantly shedding from you.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
              </div>
            </div>
          </div>
    </div>
</div>
</div>
{% endblock %}

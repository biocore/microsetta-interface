{% extends "sitebase.jinja2" %}
{% set page_title = _("Sample Report") %}
{% set show_breadcrumbs = show_breadcrumbs %}


{% block head %}

<link rel="stylesheet" type="text/css" href="/static/vendor/css/jquery.dataTables.css" />
<link id="emperor-css" rel="stylesheet" type="text/css" href="/static/vendor/emperor/css/emperor.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/jquery-ui.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/slick.grid.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/spectrum.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/chosen.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/jquery.contextMenu.min.css">
<link rel="stylesheet" type="text/css" href="/static/css/4_column_flex.css" />
<link rel="stylesheet" href="/static/css/minimal_interface.css" />
<style>
    .nav-white-bg {
      background-color: #fff;
      width: 100%;
      padding-left: 115px;
      padding-right: 100px;
    }
    .diversity-icon {
      vertical-align: middle;
      width: 72px;
      height: 72px;
      object-fit: contain;
      float:left;
     }
    .diversity-text {
        vertical-align:middle; 
        display:inline;
        float:left;
        padding: 10px;
        padding-left: 20px;
    }
    .diversity-header {
        background-color: #EDECEF;
        padding: 10px;
    }
    .diversity-compare {
      background-color: #ffffff;
      color: #747678;
      border-radius: 15px;
      padding: 10px;
      padding-left: 20px;
      border-style: solid;
      border-width: 2px;
      border-color: #006a96;
      width: 30%;
      margin: 20px;
    }
    @media (max-width: 575.98px) {
        div.diversity-compare {
            width: 90%;
        }
    }
    .diversity-category {
      color: #006a96;
    }
    .diversity-info {

    }
    .diversity-banner {
      width: 100%;
      max-width: 1920px;
      height: auto;
      border-radius: 8px;
      border: 1px solid #ddd;
    }
    .similarity-fontstyle-same {
        color: var(--ucsd-green);
    }
    .similarity-fontstyle-different {
        color: var(--ucsd-brown);
    }
    /*.micromap {
        min-width: 400px;
        min-height: 300px;
    }*/
    .microinfo {
        min-width: 40%;
    }
    /*Removes the .active, .accordion:hover effect from minimal_interface.css*/
    /* Could potentially use color: initial but has less support...? */
    .accordion-microbiome-map
    {
        background-color: #eee;
        color: #000;
        cursor: pointer;
        padding: 5px;
        width: 100%;
        text-align: left;
        border: none;
        outline: none;
        transition: 0.4s;
        margin-bottom: 1%;
        margin-top: 1%;
    }
    .accordion-panel-microbiome-map {
        background-color: white;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
    }
    .tab-pane {
        background-color: #FFFFFF;
        color: #000000;
    } 
    .microbe-count {
        font-weight: bold;
    }
    div.results_text {
        text-align: left;
        max-width: calc(100% - 2in);
        margin-left: auto;
        margin-right: auto;
    }
    div.how_you_compare_section {
        background-color: #f1f1f1;
        color: #747678;
        border-radius: 15px;
        padding: 10px;
        padding-left: 20px;
        border-style: solid;
        border-width: thin;
        border-color: #006a96;
        width: 70%;
    }
    @media (max-width: 575.98px) {
        div.how_you_compare_section {
            width: 100%;
        }
    }
    div.how_you_compare_section h3 {
      color: #006a96;
      font-weight: lighter;
      font-family: Mulish,sans-serif;
      font-size: 36px;
    }
    div.how_you_compare_section h4 {
      color: #006a96;
      font-weight: lighter;
      font-family: Mulish,sans-serif;
      font-size: 20px;
    }
    div.how_you_compare_section p {
      font: normal normal 400 14px/1.6 Muli,sans-serif;
      font-variant-numeric: oldstyle-nums;
      color: #747678;
    }
    div.how_you_compare_section a {
      color: #006a96;
    }
    div.your_sample_diversity_inset {
      background-color: #006a96;
      color: #ffffff;
      font-size: 20px;
      border-radius: 15px;
      border-style: solid;
      border-width: thin;
      border-color: #006a96;
      width: 35%;
      box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);
    }
    @media (max-width: 575.98px) {
        div.your_sample_diversity_inset {
            width: 100%;
        }
    }
    .scatter-bg {
      background-image: url('/static/img/scatter.png');
      background: url('/static/img/scatter.png');
      background-position: top 400px left 0px;
      background-size: 220px;
      background-origin: content-box;
      background-repeat: no-repeat;
    }

    div.your_sample_diversity_inset .card-header {
      color: #ffffff;
      text-align: center;
      border-radius: 15px 15px 0 0;
      color: #006a96;
    }

    div.your_sample_diversity_inset .card-body {
      color: #ffffff;
      font-size: 32px;
      text-align: center;
    }

    .tooltipper {
        color: #fc8900;
    }
    .tooltip.show {
        opacity: 1;
    }
     
    .tooltip-inner {
      background-color: #ffffff; !important;
      color: #747678;
      border: 2px solid #fc8900;
      }
     
    .bs-tooltip-auto[x-placement^=bottom] .arrow::before, .bs-tooltip-bottom .arrow::before {
        border-bottom-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=top] .arrow::before, .bs-tooltip-top .arrow::before {
        border-top-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=left] .arrow::before, .bs-tooltip-left .arrow::before {
        border-left-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=right] .arrow::before, .bs-tooltip-right .arrow::before {
        border-right-color: #fc8900 !important;
    }

</style>

<script type="text/javascript" language="javascript" src="/static/js/ruleset.js"></script>
<!-- Datatables must precede emperor imports, they don't play nice with each other. -->
<script type="text/javascript" charset="utf8" src="/static/vendor/js/jquery.dataTables.js"></script>
<script src="/static/vendor/DataTables/Buttons-1.6.2/js/dataTables.buttons.min.js"></script>
<script src="/static/vendor/DataTables/Buttons-1.6.2/js/buttons.html5.min.js"></script>
<script src="/static/vendor/DataTables/PercentageBars-1.10.21/js/percentageBars.js"></script>
    <!-- plotly must precede emperor imports as well.   I'm getting the feeling
     that emperor doesn't know how to play nice. -->
<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>

<script src="/static/vendor/emperor/vendor/js/require-2.1.22.min.js"></script>
<script src="/static/vendor/emperor/emperor_loader.js"></script>

<script>
    "use strict";

    var dynamic_text_dictionary = {
        "11 to 20": "{{ _('11 to 20') }}",
        "21 to 30": "{{ _('21 to 30') }}",
        "5-6 hours": "{{ _('5-6 hours') }}",
        "6 to 10": "{{ _('6 to 10') }}",
        "6-7 hours": "{{ _('6-7 hours') }}",
        "7-8 hours": "{{ _('7-8 hours') }}",
        "8 or more hours": "{{ _('8 or more hours') }}",
        "Daily": "{{ _('Daily') }}",
        "Less than 5": "{{ _('Less than 5') }}",
        "Less than 5 hours": "{{ _('Less than 5 hours') }}",
        "More than 30": "{{ _('More than 30') }}",
        "Never": "{{ _('Never') }}",
        "Not provided": "{{ _('Not provided') }}",
        "Occasionally (1-2 times/week)": "{{ _('Occasionally (1-2 times/week)') }}",
        "Rarely (a few times/month)": "{{ _('Rarely (a few times/month)') }}",
        "Rarely (less than once/week)": "{{ _('Rarely (less than once/week)') }}",
        "Regularly (3-5 times/week)": "{{ _('Regularly (3-5 times/week)') }}",
        "not applicable": "{{ _('Not provided') }}",
        "not collected": "{{ _('Not provided') }}",
        "not provided": "{{ _('Not provided') }}"
    };

    function placeURLSourcedImageFromDetail(state, url, detail) {
        /* this creates the following html structure off of #pcoa-div
       	
		<div id="accordion-div-id">
			<button class="accordion-microbiome-map">
				<h4 class="diversity-header">button_text</h4>
			</button>
			<div class="accordion-panel-microbiome-map" style="">
				<div class="row">
					<div class="col-5">
						<div id="img_div_id">
							<img id="imgid" src="#" alt="img" class="img-fluid"/>
						</div>
					</div>
					<div class="col microinfo">
						description
					</div>
				</div>
			</div>
		</div> 
		*/
        var pcoa_div = document.getElementById('pcoa-div');
        
        var img = document.createElement('img');
        img.id = detail['img_id'];
        img.classList.add('img-fluid');
        img.setAttribute('alt', 'img');

        var img_div = document.createElement('div');
        img_div.id = detail['img_div_id'];
        img_div.appendChild(img);

        var content_div = document.createElement('div');
        content_div.classList.add('accordion-panel-microbiome-map');
        content_div.style = '';
        
        var content_div_row = document.createElement('div');
        content_div_row.classList.add('row');

        var content_div_img = document.createElement('div');
        content_div_img.classList.add('col-5');

        var content_div_desc = document.createElement('div');
        content_div_desc.classList.add('col');
        content_div_desc.classList.add('microinfo');
        content_div_desc.innerHTML = detail['description'];

        content_div_img.appendChild(img_div);
        content_div_row.appendChild(content_div_img);
        content_div_row.appendChild(content_div_desc);
        content_div.appendChild(content_div_row);

        var button_text = document.createElement('h4');
        button_text.classList.add('diversity-header');
        button_text.innerText = detail['button_text'];

        var button = document.createElement('button');
        button.classList.add('accordion-microbiome-map');
        button.style = '';
        button.type = 'button';
        button.appendChild(button_text);

        var accordion = document.createElement('div')
        accordion.classList.add('microbiome-map-multipop-lifestage-accordian');
        accordion.appendChild(button);
        accordion.appendChild(content_div);
        pcoa_div.appendChild(accordion);

        placeURLSourcedImage(state, url, detail['img_id']);
    };

    function placeURLSourcedImage(state, url, divSelector) {
        $('#' + divSelector).attr('src', url);
    };


    var pcoa_structure = {
        'tmi_16S_gut_all_samples': {
            'dataset': 'tmi-16S-allsamples',
            'category': 'microbial_map',
            'accordion_div_id': 'microbiome-map-all-tmi-accordion',
            'button_text': "{{ _('Microbiomes Across the Body') }}",
            'img_div_id': 'pcoa-tmi-all-samples',
            'img_id': 'pcoa-tmi-all-samples-img',
            'description': "<p>{{ _('In this map, we\'ve placed your sample relative to all the other samples we have in Microsetta. As you can see, there are a few different types of samples people have contributed, and the microbial configurations present can be VERY different.') }}</p>"},
        'tmi_16S_gut_multipop': {
            'dataset': 'multipop-16S-gut',
            'category': 'microbial_map_region',
            'accordion_div_id': 'microbiome-map-multipop-region-accordion',
            'button_text': "{{ _('Microbiomes Across the World') }}",
            'img_div_id': 'pcoa-multipopulation-region',
            'img_id': 'pcoa-multipopulation-region-img',
            'description': "<p>{{ _('Researchers have noted large differences in our microbiomes depending on where we live. The reason why is not fully understood, but they suspect factors such as diet or environmental exposures (e.g. plants, pets, what\'s in your house, pollution, how often you come in contact with soil, etc) may be major factors.<br /><br />Researchers do not yet know how much these differences between locations matter, but it is a topic that is under active investigation.') }}</p>"},
        'tmi_16S_gut_lifestage': {
            'dataset': 'lifestage-16S-gut',
            'category': 'microbial_map_lifestage',
            'accordion_div_id': 'microbiome-map-multipop-lifestage-accordian',
            'button_text': "{{ _('Microbiomes Across the Lifespan') }}",
            'img_div_id': 'pcoa-multipopulation-lifestage',
            'img_id': 'pcoa-multipopulation-lifestage-img',
            'description': "<p>{{ _('One major factor associated with gut microbiomes is the age of the individual, represented in this map by life stages.<br /><br />Interestingly, compared to differences among adults living in different areas of the world, infants are relatively similar microbially regardless of where they were born. But, as individuals age, their microbiomes reflect greater geographical or lifestyle differences.') }}</p>"},
        'tmi_16S_gut_builtenv': {
            'dataset': 'builtenv-16S-allsamples',
            'category': 'microbial_map',
            'accordion_div_id': 'microbiome-map-builtenv-accordian',
            'button_text': "{{ _('Microbiomes in the Environment') }}",
            'img_div_id': 'pcoa-builtenv',
            'img_id': 'pcoa-builtenv-img',
            'description': "<p>{{ _('Microbes don\'t just live inside and on your body; they are everywhere! Using the same techniques described in the previous maps, we compared your microbiome to samples collected from all over the surfaces of brand-new hospital offices.<br /><br />As you can see, skin samples tend to more closely resemble those from \'the office surfaces,\' which makes sense as skin cells are constantly shedding from you. In an indoor environment, dust is typically composed of up to 50%% dead skin cells.') }}</p>"},
        'tmi_WGS_gut_multipop': {
            'dataset': 'multipop-WGS-gut',
            'category': 'microbial_map_region',
            'accordion_div_id': 'microbiome-map-multipop-accordian',
            'button_text': "{{ _('Microbiomes Across the World') }}",
            'img_div_id': 'pcoa-multipopulation-region',
            'img_id': 'pcoa-multipopulation-region-img',
            'description': "<p>{{ _('Researchers have noted large differences in our microbiomes depending on where we live. The reason why is not fully understood, but they suspect factors such as diet or environmental exposures (e.g. plants, pets, what\'s in your house, pollution, how often you come in contact with soil, etc) may be major factors.<br /><br />Researchers do not yet know how much these differences between locations matter, but it is a topic that is under active investigation.') }}</p>"},
        'tmi_WGS_gut_lifestage': {
            'dataset': 'lifestage-WGS-gut',
            'category': 'microbial_map_lifestage',
            'accordion_div_id': 'microbiome-map-multipop-lifestage-accordian',
            'button_text': "{{ _('Microbiomes Across the Lifespan') }}",
            'img_div_id': 'pcoa-multipopulation-lifestage',
            'img_id': 'pcoa-multipopulation-lifestage-img',
            'description': "<p>{{ _('One major factor associated with gut microbiomes is the age of the individual, represented in this map by life stages.<br /><br />Interestingly, compared to differences among adults living in different areas of the world, infants are relatively similar microbially regardless of where they were born. But, as individuals age, their microbiomes reflect greater geographical or lifestyle differences.') }}</p>"},
        'tmi_WGS_skin_all_samples': {
            'dataset': 'tmi-WGS-allsamples',
            'category': 'microbial_map',
            'accordion_div_id': 'microbiome-map-all-tmi-accordion',
            'button_text': "{{ _('Microbiomes Across the Body') }}",
            'img_div_id': 'pcoa-tmi-all-samples',
            'img_id': 'pcoa-tmi-all-samples-img',
            'description': "<p>{{ _('In this map, we\'ve placed your sample relative to all the other samples we have in Microsetta. As you can see, there are a few different types of samples people have contributed, and the microbial configurations present can be VERY different.') }}</p>"}
    };

    function getMicrobiomeMapsRasterizedPlots(state) {
        if(state.dataset_site.value === 'gut') {
            if(state.dataset_type.value === 'WGS') {
                var pcoa_plots = ['tmi_WGS_gut_multipop', 'tmi_WGS_gut_lifestage'];
            } else {
                var pcoa_plots = ['tmi_16S_gut_all_samples', 'tmi_16S_gut_multipop', 'tmi_16S_gut_lifestage', 'tmi_16S_gut_builtenv'];
            }
        } else {
            if(state.dataset_type.value === 'WGS') {
                var pcoa_plots = ['tmi_WGS_skin_all_samples'];
            } else {
                var pcoa_plots = [];
            }
        }
        
        for (var key of pcoa_plots) {
            let detail = pcoa_structure[key];
            let url = state.public_endpoint + 
                '/dataset/' + 
                detail['dataset'] + 
                '/plotting/diversity/beta/' + 
                state.beta_metric + 
                '/pcoa/full-dataset/' +
                'png?category=' + 
                detail['category'] + 
                '&sample_id=' + 
                state.barcode_prefix + 
                state.sample_id;
            placeURLSourcedImageFromDetail(state, url, detail);
        }
        setupAccordions();
    };


    function datasets_span(label_text, span_id) {
        var div = document.getElementById('datasets-used');
        var label = document.createElement('h5');
        label.innerText = label_text;
        var list = document.createElement('ul');
        var span = document.createElement('span');
        span.id = span_id.substring(1);
        span.classList.add('info-loader');  
        span.classList.add('text-success'); 

        div.appendChild(label);
        div.appendChild(list);
        list.appendChild(span);
        div.appendChild(document.createElement('br'));
    }

    function addDatasetDetail(detail) {
        let name = Object.keys(detail)[0];
        let info = detail[name];
        let span_id = "";
        let label = "";

        // Qiita doesn't provide an easy way to obtain this detail 
        // soo... not ideal but let's provide a way to get study 
        // links for various datasets
        let study_lookup = {'10317': ["American Gut: an Open Platform for Citizen Science Microbiome Research", 
                                      "https://msystems.asm.org/content/3/3/e00031-18"],
                            "850": ["Human gut microbiome viewed across age and geography", 
                                    "https://www.nature.com/articles/nature11053"],
                            "10297": ["Growth and Morbidity of Gambian Infants are Influenced by Maternal Milk Oligosaccharides and Infant Gut Microbiota", 
                                      "https://www.nature.com/articles/srep40466"],
                            "10080": ["The Fecal Microbial Community of Breast-fed Infants from Armenia and Georgia", "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5288704/"],
                            "10300": ["The Fecal Microbial Community of Breast-fed Infants from Armenia and Georgia", "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5288704/"],
                            "11076": ["Rapid change of fecal microbiome and disappearance of Clostridium difficile in a colonized infant after transition from breast milk to cow milk", "https://microbiomejournal.biomedcentral.com/articles/10.1186/s40168-016-0198-6"],
                            "11884": ["Natural history of the infant gut microbiome and impact of antibiotic treatment on bacterial strain diversity and stability", "https://stm.sciencemag.org/content/8/343/343ra81"],
                            "1454": ["Persistent gut microbiota immaturity in malnourished Bangladeshi children", "https://www.nature.com/articles/nature13421"],
                            "10249": ["Antibiotics, birth mode, and diet shape microbiome maturation during early life", "https://stm.sciencemag.org/content/8/343/343ra82"],
                            "11937": ["Gut Microbiota in the First 2 Years of Life and the Association with Body Mass Index at Age 12 in a Norwegian Birth Cohort", "https://mbio.asm.org/content/9/5/e01751-18"],
                            "10333": ["Walls talk: Microbial biogeography of homes spanning urbanization", "https://advances.sciencemag.org/content/2/2/e1501061"],
                            "10423": ["Geography and location are the primary drivers of office microbiome composition", "https://msystems.asm.org/content/1/2/e00022-16"],
                            "11358": ["Seasonal cycling in the gut microbiome of the Hadza hunter-gatherers of Tanzania", "https://science.sciencemag.org/content/357/6353/802"],
                             "2024": ["Microbiota at Multiple Body Sites during Pregnancy in a Rural Tanzanian Population and Effects of Moringa-Supplemented Probiotic Yogurt", "https://aem.asm.org/content/81/15/4965"],
                            "11993": ["Gut microbiota is associated with obesity and cardiometabolic disease in a population in the midst of Westernization", "https://www.nature.com/articles/s41598-018-29687-x"],
                            "10581": ["Cohort of human mothers and babies from El Salvador ", "https://www.ebi.ac.uk/ena/browser/view/ERP112775"],
                            "10352": ["Comparison of Fecal Collection Methods for Microbiota Studies in Bangladesh", "https://aem.asm.org/content/83/10/e00361-17"],
                            "11757": ["Regional variation limits applications of healthy gut microbiome reference ranges and disease models", "https://www.nature.com/articles/s41591-018-0164-x"],
                             "1481": ["Whole-grain wheat consumption reduces inflammation in a randomized controlled trial on overweight and obese subjects with unhealthy dietary and lifestyle behaviors: role of polyphenols bound to cereal dietary fiber", "https://academic.oup.com/ajcn/article/101/2/251/4494380"],
                            "10052": ["The microbiome of uncontacted Amerindians", "https://advances.sciencemag.org/content/1/3/e1500183"],
                             "1448": ["Subsistence strategies in traditional societies distinguish gut microbiomes", "https://www.nature.com/articles/ncomms7505"],
                             "1718": ["Infant time series", ""],
                             "11666": ["Gut microbiome composition in the Hispanic Community Health Study/Study of Latinos is shaped by geographic relocation, environmental factors, and obesity", "https://pubmed.ncbi.nlm.nih.gov/31672155/"],
                             "12142": ["The National FINRISK Study ", "https://www.nature.com/articles/s41467-021-22962-y"],
                             "1926": ["Structure, function and diversity of the healthy human microbiome", "https://www.nature.com/articles/nature11234"],
                             "11484": ["Multi-omics of the gut microbial ecosystem in inflammatory bowel diseases", "https://pubmed.ncbi.nlm.nih.gov/31142855/"],
                             "11405": ["The effect of legume supplementation on the gut microbiota in rural Malawian infants aged 6 to 12 months ", "https://pubmed.ncbi.nlm.nih.gov/32047925/"],
                             "11546": ["Gastrointestinal Surgery for Inflammatory Bowel Disease Persistently Lowers Microbiome and Metabolome Diversity", "https://pubmed.ncbi.nlm.nih.gov/33026068/"]
        }
        switch (name) {
            case "builtenv-16S-allsamples":
                label = '{{ _('Microbiomes in the Environment') }}';
                span_id = "#dataset_links_builtenv";
                break;
            case "tmi-WGS-gut":
            case "tmi-16S-gut":
            case "tmi-WGS-skin":
            case "tmi-16S-skin":
                label = '{{ _('The Microsetta Initiative') }}';
                span_id = "#dataset_links_tmi";
                break;
            case "multipop-16S-gut":
            case "multipop-WGS-gut":
                label = '{{ _('Microbiomes Across the World') }}';
                span_id = "#dataset_links_multipopgut";
                break;
            case "lifestage-16S-gut":
            case "lifestage-WGS-gut":
                label = '{{ _('Microbiomes Across the Lifespan') }}';
                span_id = "#dataset_links_lifestagegut";
                break;
            default:
                return;
        };
        datasets_span(label, span_id);

        let study_title = "";
        let study_url = "";
        let to_append = "";
        for (var qiita_id of info['qiita-study-ids']) {
            if(qiita_id in study_lookup) {
                study_title = study_lookup[qiita_id][0];
                study_url = study_lookup[qiita_id][1];
                to_append = '<li><h6 style="margin-bottom: 0px;">' + study_title + '</h6>'; //<span>' + study_title + '</span>';
                if(study_url !== "") {
                    to_append = to_append + '<a href="' + study_url + '">{{ _('Publication link') }}</a><br />';
                }
                to_append = to_append + '<a href="https://qiita.ucsd.edu/public/?study_id=' + qiita_id + '">{{ _('Data access (Qiita study') }} ' + qiita_id + ')</a>';
                to_append = to_append + '</li>';

                $(span_id).append(to_append).removeClass("spinner-grow spinner-grow-sm");
            }
        }
                
                    
            //$(span_id).append('<li><h6>' + study_title + '</h6><br /><span>' + study_title + '</span>
            //$(span_id).append('<li><a href="https://qiita.ucsd.edu/public/?study_id=' + qiita_id + '">Qiita Study: ' + qiita_id + '</li>').removeClass("spinner-grow spinner-grow-sm");
        //if (detail['qiita-study-ids'].length > 1)
        //    $("#dataset_meta_analysis").text(" (which was a meta analysis that combines the data you helped collect with other public microbiome results)").removeClass("spinner-grow spinner-grow-sm");
        //else
        //    $("#dataset_meta_analysis").text("").removeClass("spinner-grow spinner-grow-sm")
    }

    function refreshDatasets(state) {
        let url = state.public_endpoint + '/sample/list/dataset/' + state.barcode_prefix + state.sample_id;
        $.ajax({
            url: url,
            type: "GET",
            success: function(data)
            {
                var have_wgs = false;
                var have_16S = false;
                var body_site = '';

                for (var i = 0; i < data.length; i++) {
                    if(data[i] === 'tmi-WGS-gut') {
                        have_wgs = true;
                        body_site = 'gut';
                    } else if(data[i] === 'tmi-WGS-skin') {
                        have_wgs = true;
                        body_site = 'skin';
                    } else if(data[i] === 'tmi-16S-gut') {
                        have_16S = true;
                        body_site = 'gut';
                    } else if(data[i] === 'tmi-16S-skin') {
                        have_16S = true;
                        body_site = 'skin';
                    }
                }

                if(!have_wgs && !have_16S) {
                    state.dataset_type.value = null
                    // error gracefully somehow?
                } else if(have_wgs) {
                    // WGS samples return both WGS and 16S data sets but we only want to display WGS on the "How can I learn more?" tab
                    for (var i = 0; i < data.length; i++) {
                        if(data[i].includes("WGS")) {
                            $.ajax({
                                url: state.public_endpoint + "/dataset/" + data[i],
                                type: "GET",
                                success: function (detail) {
                                    addDatasetDetail(detail);
                                }
                            });
                        }
                    }

                    state.dataset_type.value = 'WGS';
                    state.dataset_site.value = body_site;
                    state.dataset_input.value = 'tmi-WGS-' + body_site;
                } else {
                    for (var i = 0; i < data.length; i++) {
                        $.ajax({
                            url: state.public_endpoint + "/dataset/" + data[i],
                            type: "GET",
                            success: function (detail) {
                                addDatasetDetail(detail);
                            }
                        });
                    }

                    state.dataset_type.value = '16S';
                    state.dataset_site.value = body_site;
                    state.dataset_input.value = 'tmi-16S-' + body_site;
                }
                console.log(state);
            }
        });
    }

    function populateSelect(select_selector, value_to_text, active_value){
        let select = $(select_selector);
        select.empty();
        for (let v in value_to_text)
        {
            let option = $('<option></option>')
                .attr("value", v)
                .text(v);
//                .text(value_to_text[v]);  //It should be this, but public api needs to send down friendly names

            if (v === active_value)
                option.attr('selected','selected');

            select.append(option);
        }
        select.prop("disabled", false);
    }

    function createTaxonomyTable(state)
    {
        $('#taxonomyTable').DataTable(
            {
                destroy: true, // Necessary to replace existing datatable
                language: {
                    url: '/static/vendor/DataTables/{{ _(EN_US_KEY) }}.json'
                },
                ajax: {
                    url: state.public_endpoint + '/dataset/' + state.dataset_input.value + "/taxonomy/present/single/" + state.taxonomy + "/" + state.barcode_prefix + state.sample_id,
                    dataSrc: function(d){
                        let representatives = {};
                        let generaSums = {};
                        //Collapse to genera (Don't show separate rows per species)
                        for (let i = 0; i < d.data.length; i++){
                            //Can't just key by genus because genus can be null/undefined.  Argh.
                            let genus_key = d.data[i].Kingdom + ";" +
                                            d.data[i].Phylum + ";" +
                                            d.data[i].Class + ";" +
                                            d.data[i].Order + ";" +
                                            d.data[i].Family + ";" +
                                            d.data[i].Genus;
                            if (genus_key in generaSums)
                            {
                                generaSums[genus_key] += d.data[i].relativeAbundance;
                            }
                            else
                            {
                                representatives[genus_key] = d.data[i];
                                generaSums[genus_key] = d.data[i].relativeAbundance;
                            }
                        }
                        let newData = [];
                        for (let genus_key in generaSums){
                            let rep = representatives[genus_key];
                            let sum = generaSums[genus_key];
                            let relativeAbundance = (sum * 100)
                            if (relativeAbundance <= 0.001) {
                                continue;
                            }

                            rep.relativeAbundance = relativeAbundance.toFixed(3);

                            for (var key of ["Kingdom", "Phylum", "Class", "Order", "Family", "Genus"]){
                                if (rep[key] != null && rep[key].startsWith("[") && rep[key].endsWith("]"))
                                    rep[key] = rep[key].substring(1,rep[key].length-1)
                            }
                            newData.push(rep);
                        }
                        return newData;
                    },
                },
                columns: [
                    {
                        data: "relativeAbundance",
                        render: $.fn.dataTable.render.percentBar('round','#FFF', '#269ABC', '#31B0D5', '#286090', 3, 'groove')
                    },
                    {data: "Kingdom"},
                    {data: "Phylum"},
                    {data: "Class"},
                    {data: "Order"},
                    {data: "Family"},
                    {data: "Genus"},
                ],
                order: [[ 0, "desc" ]],
                dom: "Bfrtip",
                buttons: [{extend: 'csv', className: 'btn btn-info', text: '{{ _('Download the spreadsheet') }}'}],
                initComplete: function(settings) {
                    $('#taxonomyTable thead th').each(function () {
                       let $td = $(this);
                       let value = $td.text();
                       switch (value) {
                           case "{{ _('Kingdom') }}":
                               value = "{{ _('The broadest classification like Bacteria, Archaea and Eukaryokes (what humans are!)') }}";
                               break;
                           case "{{ _('Phylum') }}":
                               value = "{{ _('Within the kingdom Eukarya, this is like the difference between humans and plants') }}";
                               break;
                           case "{{ _('Class') }}":
                               value = "{{ _('Within the phylum Chordata, this is along the lines of humans and fish') }}";
                               break;
                           case "{{ _('Order') }}":
                               value = "{{ _('Within the class Mammalia, this is like the difference between whales and a dogs') }}";
                               break;
                           case "{{ _('Family') }}":
                               value = "{{ _('With the order Carnivora are the families for dogs and cats') }}";
                               break;
                           case "{{ _('Genus') }}":
                               value = "{{ _('Within the family Canidae, you would find a genus for foxes and one for wolves') }}";
                               break;
                           default:
                               value = "";
                               break; 
                       }
                       $td.attr('title', value);
                    });
                    
                    /* Apply the tooltips */
                    $('#taxonomyTable thead th[title]').tooltip(
                    {
                        container: 'body',
                        placement: 'auto'
                    });
                }
            }
        );
    }

    function retrieveNeighbors(state, k){
        let url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/diversity/beta/' + state.beta_metric + '/nearest';
        return $.ajax({
            method: "GET",
            url: url,
            data: {
                sample_id: state.barcode_prefix + state.sample_id,
                k:k
            }
        }).fail(function(result, textStatus, errorThrown){
            console.log("Couldn't retrieve neighbors" + textStatus)
        });
    }

    function fillNNResults(state, categories, chooserMap, selectorMap) {
        return function(samplesQueried, sampleResults) {
            // Count number of responses for each answer of each question
            let categoryCounts = {}
            let display = {}
            for (let i = 0; i < samplesQueried.length; i++) {
                for (let j = 0; j < categories.length; j++) {
                    let cat = categories[j]
                    if (!(cat in categoryCounts))
                        categoryCounts[cat] = {}
                    let val = sampleResults[i][j]
                    if (!(val in categoryCounts[cat]))
                        categoryCounts[cat][val] = 0
                    categoryCounts[cat][val] += 1
                }
            }

            for (let j = 0; j < categories.length; j++){
                let cat = categories[j]
                let sum = 0
                let maxval = -1
                let maxkey = null
                for (let key in categoryCounts[cat]) {
                    let val = categoryCounts[cat][key]
                    sum += val
                    if (key !== "Not provided" && val > maxval) {
                        maxval = val
                        maxkey = key
                    }
                }

                let me = samplesQueried.indexOf(state.barcode_prefix + state.sample_id);
                let my_cat = categories.indexOf(cat);
                let my_value = sampleResults[me][my_cat];
                let set_color = null;

                let chosen = null
                if (!(cat in chooserMap) || chooserMap[cat]["type"] === "max") {
                    chosen = maxkey
                    if(chosen === my_value) {
                        set_color = 'similarity-fontstyle-same';
                    } else {
                        set_color = 'similarity-fontstyle-different';
                    }
                }
                else if (chooserMap[cat]["type"] === "specified")
                    chosen = chooserMap[cat]["value"]
                else if (chooserMap[cat]["type"] === "same") {
                    me = samplesQueried.indexOf(state.barcode_prefix + state.sample_id)
                    j = categories.indexOf(cat)
                    chosen = sampleResults[me][j]
                }
                display[cat] = {}
                if(chosen in dynamic_text_dictionary) {
                    display[cat]["response"] = dynamic_text_dictionary[chosen];
                } else {
                    display[cat]["response"] = chosen;
                }
                display[cat]["value"] = Math.round((categoryCounts[cat][chosen] / sum) * 100) + "%"
                display[cat]["color"] = set_color;
            }

            for (let cat of categories) {
                if (!(cat in selectorMap))
                    continue;
                let resp_selector = selectorMap[cat][0]
                let val_selector = selectorMap[cat][1]
                let resp = display[cat]["response"]
                let val = display[cat]["value"]
                let color = display[cat]["color"]

                $(val_selector).text(val).removeClass("spinner-grow spinner-grow-sm");
                if(color !== null) {
                    $(resp_selector).text(resp).removeClass("spinner-grow spinner-grow-sm text-success").addClass(color);
                } else {
                    $(resp_selector).text(resp).removeClass("spinner-grow spinner-grow-sm");
                }

                
            }

        }
    }


    function queryNeighborAndSelfMetadata(state, metadata_cats){
        return function(result, textStatus, jqXHR)
        {
            let toQuery = result;
            toQuery.push(state.barcode_prefix + state.sample_id);

            return $.ajax(
            {
                method: "POST",
                url: state.public_endpoint + '/dataset/' + state.dataset_input.value + "/metadata/values?" + $.param({ cat: metadata_cats }, true), // The true indicates traditional mode, which produces cat=blah&cat=blah rather than cat[]=blah&cat[]=blah which crashes the server.
                data: JSON.stringify(toQuery),
                contentType: "application/json"
            }).fail(function(result, textStatus, errorThrown){
                console.log("Couldn't retrieve metadata for neighbors and self " + errorThrown)
            }).then(function(result, textStatus, jqXHR){
                let thenner = {};
                thenner.then = function(func){
                    // Need to pass on the sample ids. Argh.
                    return func(toQuery, result);
                };
                return thenner;
            });
        };
    }

    function updateCompare(state){
        // Reset all the fields to spinners
        $(".info-loader").empty().addClass("spinner-grow spinner-grow-sm");

        // Stuff to fill in:
        // sample_type, n_bacteria, n_archaea, dataset_name,
        // n_bacteria_background, n_archaea_background,
        // age_nearest_neighbor, more_or_less_sweets_nearest_neighbor

        function retrieveText(method, url, data){
            return $.ajax({
                method: method,
                url: url,
                data: JSON.stringify(data),
                contentType: "application/json"
            }).fail(function(result, textStatus, errorThrown){
                console.log("Couldn't retrieve text for " + method + " " + url);
            });
        }

        function setInfoText(resultSelector){
            return function(result, textStatus, jqXHR){
                return $(resultSelector).text(result).removeClass("spinner-grow spinner-grow-sm");
            };
        }

        function fillResults(state, selectors)
        {
            return function(samplesQueried, sampleResults)
            {
                // First selector, age, Second selector, sweets
                // No similarity between the two, so we just have to handle both
                let me = samplesQueried.pop();
                let my_data = sampleResults.pop();

                if (me !== (state.barcode_prefix + state.sample_id))
                    console.log("Bad call to fill results, sample id mismatch");

                for (let selector_index = 0; selector_index < selectors.length; selector_index++)
                {
                    if (selectors[selector_index] === "#age_nearest_neighbor")
                    {
                        // Find age of first neighbor with age
                        let nearest_age = "{{ _('Unspecified') }}";
                        for (let i = 0; i < samplesQueried.length; i++)
                        {
                            if (sampleResults[i][selector_index] !== "{{ _('Unspecified') }}")
                            {
                                nearest_age = Math.round(sampleResults[i][selector_index]);
                                break;
                            }
                        }
                        if (nearest_age === "{{ _('Unspecified') }}")
                            setInfoText(selectors[selector_index])("{{ _('chose not to provide their age') }}", null, null);
                        else
                            setInfoText(selectors[selector_index])("{{ _('is') }} " + nearest_age + " {{ _('years old') }}", null, null);
                    }
                    if (selectors[selector_index] === "#more_or_less_sweets_nearest_neighbor")
                    {
                        // Find string value for first neighbor with a string value
                        let nearest_sweets = "{{ _('Unspecified') }}";
                        for (let i = 0; i < samplesQueried.length; i++)
                        {
                            if (sampleResults[i][selector_index] !== "{{ _('Unspecified') }}" &&
                                sampleResults[i][selector_index] !== "{{ _('Not provided') }}")
                            {
                                nearest_sweets = sampleResults[i][selector_index];
                                break;
                            }
                        }

                        // Comparing metadata is an absolute nightmare.
                        let possible_values = {
                            "{{ _('Unspecified') }}" : NaN,
                            "{{ _('Not provided') }}" : NaN,
                            "{{ _('Never') }}" : 0,
                            "{{ _('Rarely (less than once/week)') }}" : 1,
                            "{{ _('Occasionally (1-2 times/week)') }}" : 2,
                            "{{ _('Regularly (3-5 times/week)') }}" : 3,
                            "{{ _('Daily') }}": 4
                        }

                        let my_sweets = possible_values[my_data[selector_index]];
                        let their_sweets = possible_values[nearest_sweets];

                        let info_text = "";
                        if (isNaN(my_sweets)){
                            if (isNaN(their_sweets))
                                info_text = "{{ _('chose not to say how many sweets they eat') }}";
                            else
                                info_text = nearest_sweets.toLowerCase() + " {{ _('eats sweets') }}";
                        }
                        else{
                            if (my_sweets < their_sweets)
                                info_text = "{{ _('eats more sugary sweets than you') }}";
                            else if (my_sweets > their_sweets)
                                info_text = "{{ _('eats fewer sugary sweets than you') }}";
                            else if (my_sweets === their_sweets)
                                info_text = "{{ _('eats about the same number of sugary sweets as you') }}";
                            else
                                info_text = "{{ _('chose not to say how many sweets they eat') }}";
                        }

                        setInfoText(selectors[selector_index])(info_text, null, null);
                    }
                }
            }
        }

        $("#sample_type").text(state.sample_type).removeClass("spinner-grow spinner-grow-sm");
        $("#dataset_name").text(state.dataset_input.value).removeClass("spinner-grow spinner-grow-sm");
        // TODO: Fill in these URLs
        retrieveText("GET", state.public_endpoint + "/dataset/" + state.dataset_input.value + "/taxonomy/single/" + state.taxonomy + "/" + state.barcode_prefix + state.sample_id + "/counts?level=Kingdom", null).then(
            function(result, textStatus, jqXHR){
                $("#n_bacteria").text(result["Bacteria"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
                $("#n_archaea").text(result["Archaea"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
            });
        retrieveText(
            "POST",
            state.public_endpoint + "/dataset/" + state.dataset_input.value + "/taxonomy/group/" + state.taxonomy + "/counts?level=Kingdom",
            {"sample_ids":[]}
        ).then(
            function(result, textStatus, jqXHR){
                $("#n_bacteria_background").text(result["Bacteria"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
                $("#n_archaea_background").text(result["Archaea"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
            });
        retrieveNeighbors(state, 1)
            .then(queryNeighborAndSelfMetadata(state, ["age_cat", "sugary_sweets_frequency"]))
            .then(fillResults(state, ["#age_nearest_neighbor", "#more_or_less_sweets_nearest_neighbor"]));
    }

    function updateDiversity(state){
        //https://www-dev.ucsd.edu/results-api/diversity/alpha/group/faith_pd?summary_statistics=true

        const more_than_30_plants =
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "types_of_plants",
                                "operator": "equal",
                                "value": "More than 30"
                            }
                        ]
                    }
            };
        const water_frequency = 
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "one_liter_of_water_a_day_frequency",
                                "operator": "equal",
                                "value": "Regularly (3-5 times/week)"
                            },
                            {
                                "id": "one_liter_of_water_a_day_frequency",
                                "operator": "equal",
                                "value": "Daily"
                            }
                        ]
                    }
            };
        const exercise_regularly =
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "exercise_frequency",
                                "operator": "equal",
                                "value": "Regularly (3-5 times/week)"
                            },
                            {
                                "id": "exercise_frequency",
                                "operator": "equal",
                                "value": "Daily"
                            }
                        ]
                    }
            };
        //I wish we had ordered categorical variables because this query is stupid
        const sleep_more_than_6_hrs =
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "sleep_duration",
                                "operator": "equal",
                                "value": "6-7 hours"
                            },
                            {
                                "id": "sleep_duration",
                                "operator": "equal",
                                "value": "7-8 hours"
                            },
                            {
                                "id": "sleep_duration",
                                "operator": "equal",
                                "value": "8 or more hours"
                            }
                        ]
                    }
            }
        const us_avg = 
            {
                "metadata_query":
                    {
                        "condition": "OR",
                        "rules": [
                            {
                                "id": "country_residence",
                                "operator": "equal",
                                "value": "United States"
                            }
                        ]
                    }
            }

        const POST_DATA = {
            "plants": more_than_30_plants,
            "water": water_frequency,
            "exercise": exercise_regularly,
            "sleep": sleep_more_than_6_hrs,
            "us_avg": us_avg
        }

        const SELECTORS = {
            "plants": "#diversity_30_plants_per_week",
            "water": "#diversity_water_regularly",
            "exercise": "#diversity_exercise_regularly",
            "sleep": "#diversity_sleep_alot",
            "us_avg": "#average-american-observed-average-" + state.dataset_site.value
        }

        // We override the default alpha_metric from state for this page.
        let alpha_metric = "shannon"
        for (let key in POST_DATA) {
            $.ajax(
                {
                    url: state.public_endpoint + "/dataset/" +
                        state.dataset_input.value +
                        "/diversity/alpha/group/" +
                        alpha_metric + "?" + $.param({summary_statistics: true}),
                    method: "POST",
                    data: JSON.stringify(POST_DATA[key]),
                    contentType: "application/json",
                    success: function (data) {
                        let display = Math.round(data["group_summary"]["median"] * 100)/100;
                        $(SELECTORS[key]).text(display).removeClass("spinner-grow spinner-grow-sm");
                    }
                }).fail(function (result, textStatus, errorThrown) {
                console.log("Couldn't retrieve alpha metrics (" + key + ")")
            });
        }
        $.ajax(
            {
                url: state.public_endpoint + "/dataset/" + 
                    state.dataset_input.value +
                    "/diversity/alpha/single/" +
                    alpha_metric + "/" + state.barcode_prefix + state.sample_id,
                method: "GET",
                contentType: "application/json",
                success: function (data) {
                    let display = Math.round(data["data"] * 100)/100;
                    $("#diversity_in_sample").text(display).removeClass("spinner-grow spinner-grow-sm");
                }
            }).fail(function (result, textStatus, errorThrown) {
            console.log("Couldn't retrieve alpha metric for the sample")
        });

    }

    function updateSimilarity(state){
        const K = 5 // However many neighbors we want to pull metadata for
        const SELECTOR_MAP = {
            "types_of_plants": ["#beta_diversity_plants_per_week_response", "#beta_diversity_plants_per_week_value"],
            "probiotic_frequency": ["#beta_diversity_probiotics_response", "#beta_diversity_probiotics_value"],
            "exercise_frequency": ["#beta_diversity_exercise_response", "#beta_diversity_exercise_value"],
            "age_cat": ["#beta_diversity_age_response", "#beta_diversity_age_value"],
            //"diet": ["",""],
            "diet_type": ["#beta_diversity_diet_type_response", "#beta_diversity_diet_type_value"],
            "multivitamin": ["#beta_diversity_multivitamin_response", "#beta_diversity_multivitamin_value"],
            "sleep_duration": ["#beta_diversity_sleep_response", "#beta_diversity_sleep_value"],
            "sex":  ["#beta_diversity_sex_response", "#beta_diversity_sex_value"]
        }
        const CHOOSER = {
            "types_of_plants": {"type": "max"},
            "probiotic_frequency": {"type": "max"},
            "exercise_frequency": {"type": "max"},
            "age_cat": {"type": "same"},
            //"diet": {"type": "same"},
            "diet_type": {"type": "same"},
            "multivitamin": {"type": "specified", "value": "Yes"},
            "sleep_duration": {"type": "max"},
            "sex":  {"type": "same"}
        }
        const CATEGORIES = []
        for (let key in SELECTOR_MAP)
            CATEGORIES.push(key)

        retrieveNeighbors(state, K)
            .then(queryNeighborAndSelfMetadata(state, CATEGORIES))
            .then(fillNNResults(state, CATEGORIES, CHOOSER, SELECTOR_MAP)) //TODO: Switch from logging to filling in divs by adding selectors here
    }

    function updateTaxonomy(taxonomyData, state){
        // Rebuild taxonomy table when we switch dataset
        createTaxonomyTable(state);

        //Need to make taxa rank plot
        /* BEGIN BLOCK COMMENTED OUT WHILE TAXA VIOLIN IS HIDDEN
        let sampling_url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/taxonomy/ranks/taxonomy?' +
            $.param({sample_size: 30000});
        let my_sample_url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/taxonomy/ranks/taxonomy/sample/' + state.barcode_prefix + state.sample_id;

        let query1 = $.ajax({
            url: sampling_url,
            type: "GET"
        });

        let query2 = $.ajax({
            url: my_sample_url,
            type: "GET"
        });

        $.when(query1, query2).done(function(sampling_results, sample_results){
            let X = 10;
            let topXOrdered = sampling_results[0]["Taxa-order"].slice(0,X);
            $("#top_ranked_genus_from_plot").text(topXOrdered[0]).removeClass("spinner-grow spinner-grow-sm");

            topXOrdered.reverse();
            let topX = new Set(topXOrdered);

            let sampling_x = [];
            let sampling_y = [];
            let sample_x = [];
            let sample_y = [];

            for (let i =0; i < sampling_results[0].Rank.length; i++)
            {
                if (topX.has(sampling_results[0].Taxon[i]))
                {
                    sampling_x.push(sampling_results[0].Rank[i]);
                    sampling_y.push(sampling_results[0].Taxon[i]);
                }
            }

            for (let i = 0; i < sample_results[0].Rank.length; i++)
            {
                if (topX.has(sample_results[0].Taxon[i]))
                {
                    sample_x.push(sample_results[0].Rank[i]);
                    sample_y.push(sample_results[0].Taxon[i]);
                }
            }

            let trace1 = {
                "name": "{{ _('Rank Distributions') }}",
                "showlegend": false,
                "spanmode": "hard",
                "type": "violin",
                "x": sampling_x,
                "y": sampling_y,
                "orientation": "h",
                "box": {
                    "visible": true
                },
                "meanline": {
                    "visible": true
                },
            };

            let trace2 = {
                "type": "scatter",
                "mode": "markers",
                "name": "{{ _('My Sample') }}",
                "x": sample_x,
                "y": sample_y
            };
            let data = [trace1, trace2];
            let layout = {
                "title": "{{ _('How abundant are my microbes compared everyone in Microsetta?') }}",
                "hovermode": false,
                "yaxis": {
                    "title": "{{ _('Common types of microbes') }}",
                    "automargin": true,
                    "categoryorder": "array",
                    "categoryarray": topXOrdered
                },
                xaxis: {
                    title: '← {{ _('Least Abundant') }} | {{ _('Most Abundant') }} →'
                }
            };
            Plotly.newPlot("taxa-violin", data, layout, {displayModeBar: false});
        });
        END BLOCK COMMENTED OUT WHILE TAXA VIOLIN IS HIDDEN */
    }

    function updateObservedAverages(state) {
        // var us_text = document.getElementById('average-american-observed-average');
        var hadza_text = document.getElementById('average-hadza-observed-average');
        if (state.dataset_type.value === 'WGS') {
            // us_text.innerText = '5.31';
            hadza_text.innerText = '6.30';
        } else if (state.dataset_type.value === '16S') {
            // us_text.innerText = '4.47';
            hadza_text.innerText = '5.20';
        }
    }

    function updateDatasetDetails(state){
        $.ajax(
            {
                url: state.public_endpoint + "/dataset/" + state.dataset_input.value,
                success: function(data)
                {
                    var info = data[state.dataset_input.value]
                    if (info == null)
                        return
                    $("#dataset_title").text(info.title).removeClass("spinner-grow spinner-grow-sm");
                    if (info.datatype === "WGS"){
                        $("#dataset-info-processing-text").text("{{ _('For your sample, we performed a technique called shotgun metagenomic sequencing where we grab random snippets from all of the DNA present. We then sequenced these random snippets to get a picture of all the kinds of life that is in your sample. Because your cells also contain DNA, some of the snippets came from your own genome, but all of the sequences from those snippets have been removed.') }} ").removeClass("spinner-grow spinner-grow-sm");
                    }
                    else if (info.datatype === "16S"){
                        $("#dataset-info-processing-text").text("{{ _('For your sample, we performed a technique called Polymerase Chain Reaction (PCR) to make many copies of a piece of DNA corresponding to a particular gene that is present in bacteria and archaea; specifically, the fourth variable region (V4) of the 16S rRNA small subunit ribosomal gene. We then sequenced these copies. DNA sequences from this region of this gene can be used like a microbial barcode, providing researchers evidence of the types of microbes that may be present in your sample.') }}").removeClass("spinner-grow spinner-grow-sm");
                    }
                    else {
                        $("#dataset-info-processing-text").text(info.datatype).removeClass("spinner-grow spinner-grow-sm");

                    }
                },
                function(result, textStatus, errorThrown){
                    console.log("Couldn't retrieve text for " + method + " " + url);
                }
            }
        );

        // First, hide all of the site-specific content
        const all_site_specific_elements = document.getElementsByClassName("site_specific_content");
        for (let i = 0; i < all_site_specific_elements.length; i++) {
            all_site_specific_elements[i].style.display = "none";
        }

        // Then, display the site-specific content for our current dataset
        const site_specific_elements = document.getElementsByClassName("site_specific_content-" + state.dataset_site.value);
        for (let i = 0; i < site_specific_elements.length; i++) {
            site_specific_elements[i].style.display = "";
        }
    }

    //Called immediately after a tab is shown
    function onTabShown(evt){
        if (evt.target.id === "similarity-tab")
        {
            // Emperor doesn't seem to understand that the tab has been shown
            // by default.  So we'll trigger a resize event on the window
            // which emperor already links to resize all of its controls.
            // Stupid, but it seems to work, whereas setting width on any of
            // the emperor controls doesn't seem to trigger necessary resizing
            // of the webGL scene
            window.dispatchEvent(new Event('resize'));
        }
    }

    function enableTooltips(){
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    }

    document.addEventListener('DOMContentLoaded', function () {
        const tabs = document.querySelectorAll('.nav-tabs .nav-link');
        const highlightBar = document.querySelector('.highlight-bar');

        tabs.forEach((tab, index) => {
            tab.addEventListener('shown.bs.tab', function () {
                const tabWidth = tab.offsetWidth;
                const tabLeft = tab.offsetLeft;
                highlightBar.style.width = `${tabWidth}px`;
                highlightBar.style.transform = `translateX(${tabLeft}px)`;
            });
        });
    });

    function setupAccordions() {
        let acc = document.getElementsByClassName("accordion-microbiome-map");
        let i;
        for (i = 0; i < acc.length; i++) {
            acc[i].addEventListener("click", function () {
                /* Toggle between adding and removing the "active" class,
          to highlight the button that controls the panel */
                this.classList.toggle("active");
                /* Show/closes  the active panel */
                let panel = this.nextElementSibling;
                if (panel.style.maxHeight) {
                    panel.style.maxHeight = null;
                } else {
                    panel.style.maxHeight = panel.scrollHeight + "px";
                }
            });
        }
    }

    function init(){
        enableTooltips();

        // Hook up fake tab links
        $('.fake-tab').click(function() {
            let link = this.dataset.link;
            $(link)[0].click();
        });

        // Listen for tab changes
        $('.nav-link').on('shown.bs.tab', onTabShown);

        let state = {};

        // Initialize state
        state.dataset_input = new NamedExpression("Dataset", "Loading...");
        //oral/gut/skin
        state.dataset_site = new NamedExpression("Dataset-Site", "Loading...");
        //16S/WGS
        state.dataset_type = new NamedExpression("Dataset-Type", "Loading...");
        state.known_datasets = [];

        state.taxonomy = "{{taxonomy}}";
        state.alpha_metric = "{{alpha_metric}}";
        state.beta_metric = "{{beta_metric}}";
        //Just using test barcode because I can never remember a valid one.
        // DONT MERGE WITH FAKE BARCODE HERE.
        state.sample_id = "{{sample.sample_barcode}}";
        //state.sample_id = "000023984";
        //state.sample_id = "000004220";
        //state.sample_id = "000023127";

        state.barcode_prefix = "{{barcode_prefix}}";
        state.public_endpoint = "{{public_endpoint}}";
        let sample_type = "oral";
        if ("{{sample.sample_site}}" === "Stool")
            sample_type="fecal";
        state.sample_type = sample_type;

        /* Whenever dataset is changed, we fire off ajax requests
           to grab new info for the plots.  */
        new DelegateOutput(function(dataset){

            // Magic string must match default string used to initialize select box
            if (dataset === "Loading...")
                return;

            //TODO: Decide how to tell each control it is waiting on ajax data
            //updateTaxonomy(null, state);

            let taxonomyData = { "result": "Taxonomy AJAX: " + dataset };

            updateCompare(state);
            updateDiversity(state);
            updateSimilarity(state);
            updateTaxonomy(taxonomyData, state);
            updateDatasetDetails(state);

            getMicrobiomeMapsRasterizedPlots(state);
            updateObservedAverages(state);
        }, state.dataset_input);

        refreshDatasets(state);
    }

    $(document).ready(init);
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const navLinks = document.querySelectorAll('.report-nav .nav-link');
        const navButtonText = document.querySelector('.navbar-toggler .nav-button-text');
        const collapseElement = document.getElementById('reportNavContent');
        const bootstrapCollapse = new bootstrap.Collapse(collapseElement, { toggle: false });

        function updateNavButtonText(text) {
            if (navButtonText) {
                navButtonText.textContent = text;
            }
        }

        navLinks.forEach(link => {
            link.addEventListener('click', function () {
                updateNavButtonText(this.textContent.trim());
                bootstrapCollapse.hide();
            });
        });
    });
</script>

{% endblock %}

{% block breadcrumb %}
    <div class="breadcrumb-container">
        <li class="breadcrumb-item"><a class="breadcrumb-item-profile" href="/accounts/{{account_id}}">{{ _('Dashboard') }}</a></li>
        <li class="breadcrumb-item"><a class="breadcrumb-item-profile" href="/accounts/{{account_id}}/sources/{{source_id}}">{{source_name}}</a></li>
        <li class="breadcrumb-item active" aria-current="page">{{ _('Report') }}</li>
    </div>
{% endblock %}

{% block content %}
    <nav class="navbar navbar-expand-custom report-nav-container">
        <div class="container-fluid ps-0 pe-0">
            <button class="navbar-toggler nav-toggle-report" type="button" data-bs-toggle="collapse" data-bs-target="#reportNavContent" aria-controls="reportNavContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="nav-button-text">
                    {{ _('Diversity') }}
                </span>
                <img src="/static/img/nav_down_report.svg" height="20" width="20" style="margin-top: 10px;" />
            </button>

            <div class="collapse navbar-collapse" id="reportNavContent">
                <ul class="nav report-nav" id="top-nav-tab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link" id="diversity-tab" data-bs-toggle="tab" href="#diversity" role="tab" aria-controls="diversity" aria-selected="false">{{ _('Diversity') }}</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="similarity-tab" data-bs-toggle="tab" href="#similarity" role="tab" aria-controls="similarity" aria-selected="false">{{ _('Similarity') }}</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="taxonomy-tab" data-bs-toggle="tab" href="#taxonomy" role="tab" aria-controls="taxonomy" aria-selected="false">{{ _('Composition') }}</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="microbial-map-tab" data-bs-toggle="tab" href="#microbial-map" role="tab" aria-controls="microbial-map" aria-selected="false">{{ _('Microbiome Map') }}</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="dataset-tab" data-bs-toggle="tab" href="#dataset-info" role="tab" aria-controls="dataset-info" aria-selected="false">{{ _('Learn More') }}</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="col-12 tab-content" id="top-nav-tabContent">
        <div class="tab-pane fade show active" id="compare" role="tabpanel" aria-labelledby="compare-tab">
            <div class="report-text">
                <h3>{{ _('How do you compare?') }}</h3>
                <img class="diversity-banner" src='/static/img/{{ _(EN_US_KEY) }}/hero-home-4-xl.jpeg'>
                <br/><br />
                <p>
                    {{ _('There are 40 trillion microbial cells in our bodies. This collection of microbial cells is known as the human microbiome. With roughly 1lb (.45kgs) of them in our gut alone, we\'re on a mission to make critical discoveries about their role in our lives. Thank you for contributing to our research project and helping advance the science.') }}
                </p>

                <p>
                    {{ _('While our human DNA is 99%% similar to one another, it\'s possible for two individuals to share zero microbial species, meaning that our microbiomes can be entirely unique. We\'ve analyzed your microbiome sample using next-generation DNA sequencing methods, and the results are broken down below in a variety of categories. Find out how you compare to your fellow citizen scientists.') }}
                </p>

                <div class="how_you_compare_section">
                    <h4>{{ _('Diversity') }}</h4>
                    <p>
                    {{ _('How diverse is your microbiome? Check out your') }} <a class="fake-tab" href="#diversity" data-link="#diversity-tab">{{ _('Diversity') }}</a>.
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>{{ _('Similarity') }}</h4>
                    <p>
                    {{ _('What kinds of people have microbiomes like yours? Check out your microbiome') }} <a class="fake-tab" href="#similarity" data-link="#similarity-tab">{{ _('Similarity') }}</a>.
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>{{ _('Your Inner Zoo') }}</h4>
                    <p>
                    {{ _('What particular kinds of microbes are in your sample? Wander through') }} <a class="fake-tab" href="#taxonomy" data-link="#taxonomy-tab">{{ _('Composition') }}</a>. 
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>{{ _('Microbiome Map') }}</h4>
                    <p>
                        {{ _('Where are you on the <a class="fake-tab" href="#microbial-map" data-link="#microbial-map-tab">Microbiome Map</a>?') }}
                    </p>
                </div>
              </div>
          </div>
          <div class="tab-pane fade" id="diversity" role="tabpanel" aria-labelledby="diversity-tab">
              <div class="column report-text">
                  <h3>{{ _('Diversity') }}</h3>
                  <br>
                  <p>
                      {{ _('This section provides insights into your microbiome diversity and how it compares to others\'.') }}
                  </p>
                  <p>
                      <strong>{{ _('How do we calculate your diversity value?') }}</strong>
                  </p>
                  <p class="site_specific_content site_specific_content-gut">
                      {{ _('Diversity can be measured in a lot of different ways. We measure it by first taking the DNA sequences from your sample and figuring out which Bacteria and Archaea they may have come from. This produces a good estimate of how many of each kind of microbe you have. The measure we use, called Shannon\'s index, takes into account how many different kinds of microbes make up your gut community (also known as richness) and how relatively abundant each of those microbes are (also known as evenness).') }}
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                      {{ _('Diversity can be measured in a lot of different ways. We measure it by first taking the DNA sequences from your sample and figuring out which Bacteria and Archaea they may have come from. This produces a good estimate of how many of each kind of microbe you have. The measure we use, called Shannon\'s index, takes into account how many different kinds of microbes make up your skin community (also known as richness) and how relatively abundant each of those microbes are (also known as evenness).') }}
                  </p>
                  <p class="site_specific_content site_specific_content-gut">
                      {{ _('This number isn\'t exact for many reasons. However, because it\'s calculated in the same way for every sample in our dataset, it provides insight into how your microbial diversity compares to others\'. For example, the <span id="average-us-tooltip" class="orange-text" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="top" title="Based on fecal samples from Microsetta participants in the United States">average</span> diversity value for people living in the US in our dataset is <strong id="average-american-observed-average-gut">FILLIN</strong>, which is lower than we find in people living a more hunter-gatherer lifestyle like the <span id="taxa-tooltip" class="orange-text" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="top" title="The Hadza are an indigenous hunter-gather group in Tanzania. The summary of the Hadza microbiome is based on Smits et al. Science 2017">Hadza</span> people of Tanzania, who have an average value of <strong id="average-hadza-observed-average">FILLIN</strong>. ') }}
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                      {{ _('This number isn\'t exact for many reasons. However, because it\'s calculated in the same way for every sample in our dataset, it provides insight into how your microbial diversity compares to others\'. For example, the <span id="average-us-tooltip" class="orange-text" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="top" title="Based on cheek samples from participants in the United States">average</span> diversity value for people living in the US in our dataset is <strong id="average-american-observed-average-skin">FILLIN</strong>.') }}
                  </p>
                  <p>
                      <strong>{{ _('What does this number mean for my health?') }}</strong>
                  </p>
                  <p class="site_specific_content site_specific_content-gut">
                      {{ _('This number reflects the variety of Bacteria and Archaea observed in your fecal sample at the time of testing. Currently, there\'s no standard for how gut microbiome diversity relates to health. While some studies suggest a potential link between higher diversity and specific health benefits, that is not true universally and more research is needed to understand the relationship. For example, it may be that the specific microbes present are more important than having many different types of microbes.') }}
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                      {{ _('This number reflects the variety of Bacteria and Archaea observed in your skin sample at the time of testing. Currently, there\'s no standard for how skin microbiome diversity relates to health. While some studies suggest a potential link between lower diversity and risk for certain skin conditions, that is not true universally and more research is needed to understand the relationship. For example, it may be that the specific microbes present are more important than having many different types of microbes.') }}
                  </p>
                  <p class="site_specific_content site_specific_content-gut">
                      {{ _('It\'s important to remember that everyone\'s gut microbiome is unique and changes over time. If your score differs from the average, it doesn\'t necessarily indicate a health concern.') }}
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                      {{ _('It\'s important to remember that everyone\'s skin microbiome is unique and changes over time. If your score differs from the average, it doesn\'t necessarily indicate a health concern.') }}
                  </p>
                  <div class="card your_sample_diversity_inset">
                      <div class="card-header">{{ _('Your sample\'s diversity value:') }}</div>
                      <div class="card-body">
                          <span id="diversity_in_sample" class="info-loader">...</span></h5>
                      </div>
                  </div>
                    <br />
                  <p class="site_specific_content site_specific_content-gut">
                    {{ _('When we calculated the diversity of the sample groups in our database, we found that it\'s closely associated with how you live your life. So here, we summarized the average diversity from our database for a few questions asked on the survey.') }}
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                    {{ _('Here, we summarized the average diversity from our database for a few questions asked on the survey.') }}
                  </p>

                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/vegetables.png'>
                          <div class="diversity-text">
                            <div class="diversity-category">
                              {{ _('Participants who eat more than 30 plants per week') }}
                            </div>
                            <div class="diversity-info">
                              {{ _('Average diversity value:') }} <span id="diversity_30_plants_per_week" class="info-loader text-success">...</span>
                            </div>
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/exercise.png'>
                          <div class="diversity-text">
                            <div class="diversity-category">
                              {{ _('Participants who exercise regularly') }}
                            </div>
                            <div class="diversity-info">
                              {{ _('Average diversity value:') }} <span id="diversity_exercise_regularly" class="info-loader text-success">...</span>
                            </div>
                          </div>
                      </div>
                  </div>
                  <div class="row mb-2">
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/fermented.png'>
                          <div class="diversity-text">
                            <div class="diversity-category">
                              {{ _('Participants who drink 1L of water regularly') }}
                            </div>
                            <div class="diversity-info">
                              {{ _('Average diversity value:') }} <span id="diversity_water_regularly" class="info-loader text-success">...</span>
                            </div>
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <img class="diversity-icon" src='/static/img/sleep.png'>
                          <div class="diversity-text">
                              <div class="diversity-category">
                                {{ _('Participants who sleep more than 6 hours per night') }}
                              </div>
                              <div class="diversity-info">
                                {{ _('Average diversity value:') }} <span id="diversity_sleep_alot" class="info-loader text-success">...</span>
                              </div>
                          </div>
                      </div>
                  </div>
                  <p class="site_specific_content site_specific_content-gut">
                      <strong>{{ _('How can I change my gut microbiome based on my results?') }}</strong>
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                      <strong>{{ _('How can I change my skin microbiome based on my results?') }}</strong>
                  </p>
                  <p class="site_specific_content site_specific_content-gut">
                      {{ _('Although we still don\'t have a predictable way to change the gut microbiome to increase or decrease the abundance of specific microorganisms, we know that various factors influence gut microbial community composition. Diet is a significant factor affecting the gut microbiome, so by changing your diet, you may be able to alter your gut microbiome. Certain probiotics could also influence your gut microbiome while actively taking them; however, research into this area is still in its early days. Factors such as stress can also change the gut microbiome. Finally, keep in mind that factors we can\'t change, such as age or genetics, can affect the gut microbiome.') }}
                  </p>
                  <p class="site_specific_content site_specific_content-skin">
                      {{ _('Although we still don\'t have a predictable way to change the skin microbiome to increase or decrease the abundance of specific microorganisms, we know that various factors influence skin microbial community composition. Environmental exposure is a significant factor affecting the skin microbiome, so by changing your surroundings, you may be able to alter your skin microbiome. For example, studies have shown that skin microbiomes can differ based on whether you live in an urban or rural area, and that your skin microbiome tends to be much more similar to the people you live with than those you don\'t live with. However, keep in mind that factors we can\'t change, such as age or genetics, also affect the skin microbiome.') }}
                  </p>
              </div>
          </div>
          <div class="tab-pane fade" id="similarity" role="tabpanel" aria-labelledby="similarity-tab">
              <div class="column report-text">
                  <h3>{{ _('Similarity') }}</h3>
                  <br>
                  <p>
                      {{ _('One of the powerful ways microbiome scientists analyze data is by looking at similarities among samples. To do this, we compute a <span id="similarity-tooltip" class="orange-text" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="top" title="Distance is the measure of length between two points. There are many ways to determine how similar or different your microbiome is from that of other participants. However, comparing the microbes is tricky as we rarely share the exact same ones. To account for this, our researchers consider the evolutionary relationships among microbes when forming these distances.">distance</span> from your sample to all other samples based on the microbes observed. The people with the smallest distance are those who have microbiomes most similar to yours. Here, we show how the 100 people with microbiomes most similar to yours answered certain survey questions. The response is colored in <span class="similarity-fontstyle-same">light green</span> if it matches your response and <span class="similarity-fontstyle-different">brown</span> if your response differed.') }}
                  </p>

                  <div id="beta-diversity-comparisons">
                  </div>


                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">{{ _('Diet') }}</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/vegetables.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_plants_per_week_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours eat <span id="beta_diversity_plants_per_week_response" class="info-loader text-success">...</span> plants per week') }}
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/diet.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_diet_type_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours had a similar diet (e.g. omnivore, vegetarian, etc.)') }}
                          </div>
                      </div>
                  </div>

                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">{{ _('Supplements') }}</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/probiotics.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_probiotics_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours <span id="beta_diversity_probiotics_response" class="info-loader text-success">...</span> take probiotics') }}
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/vitamins.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_multivitamin_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours take vitamins') }}
                          </div>
                      </div>
                  </div>
                  
                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">{{ _('Activity') }}</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/exercise.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_exercise_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours exercise <span id="beta_diversity_exercise_response" class="info-loader text-success">...</span>') }}
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/sleep.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_sleep_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours get <span id="beta_diversity_sleep_response" class="info-loader text-success">...</span> of sleep at night') }}
                          </div>
                      </div>
                  </div>
                  
                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">{{ _('Demographic') }}</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/age.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_age_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours were the same age as you') }}
                          </div>
                      </div>
                      <div class="col diversity-compare">
                          <div class="col-sm-2">
                              <img class="diversity-icon" src='/static/img/gender.png'>
                          </div>
                          <div class="col-sm-8 diversity-text">
                              {{ _('<span id="beta_diversity_sex_value" class="info-loader font-weight-bold">...</span> of people with a microbiome like yours were the same gender') }}
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="tab-pane fade" id="taxonomy" role="tabpanel" aria-labelledby="taxonomy-tab">
              <div class="row">
                  <div class="column report-text">
                    <h3>{{ _('Your Inner Zoo (aka What\'s in your sample?)') }}</h3>
                    <br>
                    <p class="site_specific_content site_specific_content-gut">
                    {{ _('This is a table of all of the different microbes we found in your sample along with their proportions.') }}
                    </p>
                    <p class="site_specific_content site_specific_content-skin">
                    {{ _('This is a table of all of the different bacteria we found in your sample along with their proportions.') }}
                    </p>
                    
                    <p>
                    {{ _('To learn more about what the taxonomic ranks (column headers) mean, place your cursor over their names. Additionally, pronunciation can be a challenge considering the language of origin varies for the names between Latin, Greek, Norse, Chinese, and more. A pronunciation guide can be found <a href="https://www.atsu.edu/faculty/chamberlain/Website/studio.htm">here</a>.') }}
                    </p>

                    <div style="padding:10px">
                      <table id="taxonomyTable" class="display" style="width:100%">
                        <thead>
                        <tr>
                          <th>{{ _('%% of Sample') }}</th>
                          <th>{{ _('Kingdom') }}</th>
                          <th>{{ _('Phylum') }}</th>
                          <th>{{ _('Class') }}</th>
                          <th>{{ _('Order') }}</th>
                          <th>{{ _('Family') }}</th>
                          <th>{{ _('Genus') }}</th>
                        </tr>
                        </thead>
                      </table>
                    </div>
                  </div>
              </div>
              <p style='font-style: italic;'>
                  * {{ _('No evidence presented here indicates what we\'ve observed is clinically dangerous') }}
              </p>
              <!--
              <hr/>
              <div class="row">
                  <div class="column report-text">
                    <p>
                    {{ _('In the plot below, you can see the most commonly observed microbial genera in the dataset, and distribution of ranks of those genera.  For example,') }}
                    <span id="top_ranked_genus_from_plot" class="info-loader text-success" >TOP_RANKED_GENUS_FROM_PLOT</span>
                    {{ _('typically has the highest relative abundance of samples in the dataset.') }}
                    </p>
                  </div>
              </div>
              <div class="row">
                  <div class="col-md-8 mx-auto">
                    <div id="taxa-violin">
                    </div>
                  </div>
              </div>
              -->
          </div>
          <div class="tab-pane fade" id="dataset-info" role="tabpanel" aria-labelledby="dataset-tab">
            <div class="row">
              <div class="column report-text">
                <h3>{{ _('How can I learn more?') }}</h3>
                <br/>
                  <p>
                  {{ _('Microbiome analysis is a burgeoning field, and the information displayed here is only an example of what is becoming possible thanks to the data that you\'ve helped collect. If you\'d like to learn more, you can even take a look at the dataset for yourself via the links below.') }}
                  </p>

                  <p id="dataset-info-processing-text"></p>

                  <p>
                  {{ _('There are many resources for microbiome information available online. If you\'d like to learn more, we recommend the site hosted by the <a href="https://asm.org/Browse-By-Topic/Newsroom/Clinical/Microbiome">American Society for Microbiology</a>, <a href="https://microbe.net/">microBEnet</a>, the <a href="http://www.probioticchart.ca/">Canadian Probiotics Chart</a>, and the <a href="https://gastro.org/aga-leadership/centers/aga-center-for-gut-microbiome-research-education/">American Gastroenterological Association</a>.') }}
                  </p>

                  <h4 style="color:black;">{{ _('Datasets used in your report') }}</h4>
                  <p>
                  {{ _('The results shown in the Microbiome Maps portion of the report relied on data from many different publically accessible microbiome datasets. These different datasets, and links to them, are listed below.') }}
                  </p>
                  <div id='datasets-used'>
                  </div>
              </div>
            </div>
          </div>
          <div class="tab-pane fade" id="microbial-map" role="tabpanel" aria-labelledby="microbial-map-tab">
            <div class="row">
              <div class="column report-text">
                <h3>{{ _('Microbiome Map') }}</h3>
                <br/>
                <p>
                {{ _('Microbiome maps turn the similarities and differences among microbiomes into a two-dimensional picture. Each dot on the map is someone\'s microbiome, and the dots closest to yours are more similar. Remember that it\'s not necessarily bad or good if your microbiome strays from the average. Our microbiomes are constantly changing from forces we can control (like diet) and forces we cannot control (like age). These maps are contextual, meaning that the differences between samples are influenced by all the other points that are shown. For example, the difference between you and another individual might look large when the map contains just adults, whereas the space between you and that same individual might look much smaller when the map also contains samples from infants. Click on one of the sections below to see where you land on the map!') }}
                </p>

                <p>
                    <strong>{{ _('How are these maps produced?') }}</strong><br />
                    {{ _('One of the ways microbiome researchers visualize complex data is through a technique called principal coordinates analysis (PCoA). We first calculate distances from every sample to every other sample–remember that distances represent similarities among microbiomes. Then a PCoA converts the distance data into coordinates which can be depicted in a visualization, placing very similar samples near each other and less similar samples further apart.') }}
                </p>
                
                <div id="pcoa-div"></div>
              </div>
            </div>
          </div>
    </div>
</div>
{% endblock %}
